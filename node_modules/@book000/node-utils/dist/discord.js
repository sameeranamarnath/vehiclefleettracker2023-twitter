"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Discord = exports.DiscordMessageFlag = void 0;
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
const DiscordButtonStyles = {
    Primary: 1,
    Secondary: 2,
    Success: 3,
    Danger: 4,
    Link: 5,
};
exports.DiscordMessageFlag = {
    SuppressEmbeds: 1 << 2,
    SuppressNotifications: 1 << 12,
};
class Discord {
    constructor(options) {
        // token があれば Bot として動作する
        // webhookUrl と channelId があれば Webhook として動作する
        // どちらもなければエラーを投げる
        if (this.isDiscordBotOptions(options)) {
            this.options = options;
        }
        else if (this.isDiscordWebhookOptions(options)) {
            this.options = options;
        }
        else {
            throw new Error('Invalid options');
        }
    }
    static get validations() {
        return {
            'token or webhookUrl and channelId': (options) => 'token' in options ||
                ('webhookUrl' in options && 'channelId' in options),
            'token is valid': (options) => typeof options.token === 'string',
            'webhookUrl is valid': (options) => typeof options.webhookUrl === 'string',
            'channelId is valid': (options) => typeof options.channelId === 'string',
        };
    }
    async sendMessage(message) {
        const formData = new form_data_1.default();
        if (typeof message === 'string') {
            formData.append('payload_json', JSON.stringify({ content: message }));
        }
        else {
            formData.append('payload_json', JSON.stringify({
                content: 'content' in message ? message.content : undefined,
                embeds: 'embeds' in message ? message.embeds : undefined,
                components: 'components' in message ? message.components : undefined,
            }));
            if ('file' in message) {
                formData.append('file', message.file.file, {
                    filename: `${message.file.isSpoiler === true ? 'SPOILER_' : ''}${message.file.name}`,
                    contentType: message.file.contentType,
                });
            }
        }
        return await (this.isDiscordBotOptions(this.options)
            ? this.sendBot(formData)
            : this.sendWebhook(formData));
    }
    async sendBot(formData) {
        if (!this.isDiscordBotOptions(this.options)) {
            throw new Error('Invalid bot options');
        }
        const response = await axios_1.default.post(`https://discord.com/api/channels/${this.options.channelId}/messages`, formData, {
            headers: {
                ...formData.getHeaders(),
                Authorization: `Bot ${this.options.token}`,
            },
            validateStatus: () => true,
        });
        if (response.status !== 200) {
            throw new Error(`Discord API returned ${response.status}: ${response.data}`);
        }
        return response.data.id;
    }
    async sendWebhook(formData) {
        if (!this.isDiscordWebhookOptions(this.options)) {
            throw new Error('Invalid webhook options');
        }
        const urlObject = new URL(this.options.webhookUrl);
        urlObject.searchParams.append('wait', 'true');
        const response = await axios_1.default.post(urlObject.toString(), formData, {
            headers: {
                ...formData.getHeaders(),
            },
            validateStatus: () => true,
        });
        if (response.status !== 200 && response.status !== 204) {
            throw new Error(`Discord API returned ${response.status}: ${response.data}`);
        }
        return response.data.id;
    }
    async editMessage(messageId, message) {
        const formData = new form_data_1.default();
        if (typeof message === 'string') {
            formData.append('payload_json', JSON.stringify({ content: message }));
        }
        else {
            formData.append('payload_json', JSON.stringify({
                content: 'content' in message ? message.content : undefined,
                embeds: 'embeds' in message ? message.embeds : undefined,
                components: 'components' in message ? message.components : undefined,
            }));
            if ('file' in message) {
                formData.append('file', message.file.file, {
                    filename: `${message.file.isSpoiler === true ? 'SPOILER_' : ''}${message.file.name}`,
                    contentType: message.file.contentType,
                });
            }
        }
        await (this.isDiscordBotOptions(this.options)
            ? this.editBot(messageId, formData)
            : this.editWebhook(messageId, formData));
    }
    async editBot(messageId, formData) {
        if (!this.isDiscordBotOptions(this.options)) {
            throw new Error('Invalid bot options');
        }
        const response = await axios_1.default.patch(`https://discord.com/api/channels/${this.options.channelId}/messages/${messageId}`, formData, {
            headers: {
                ...formData.getHeaders(),
                Authorization: `Bot ${this.options.token}`,
            },
            validateStatus: () => true,
        });
        if (response.status !== 200) {
            throw new Error(`Discord API returned ${response.status}: ${response.data}`);
        }
    }
    async editWebhook(messageId, formData) {
        if (!this.isDiscordWebhookOptions(this.options)) {
            throw new Error('Invalid webhook options');
        }
        const urlObject = new URL(this.options.webhookUrl);
        urlObject.searchParams.append('wait', 'true');
        const response = await axios_1.default.patch(`${urlObject.toString()}/messages/${messageId}`, formData, {
            headers: {
                ...formData.getHeaders(),
            },
            validateStatus: () => true,
        });
        if (response.status !== 200 && response.status !== 204) {
            throw new Error(`Discord API returned ${response.status}: ${response.data}`);
        }
    }
    isDiscordBotOptions(options) {
        return ('token' in options &&
            typeof options.token === 'string' &&
            options.token.length > 0 &&
            'channelId' in options &&
            typeof options.channelId === 'string' &&
            options.channelId.length > 0);
    }
    isDiscordWebhookOptions(options) {
        return ('webhookUrl' in options &&
            typeof options.webhookUrl === 'string' &&
            options.webhookUrl.length > 0);
    }
}
exports.Discord = Discord;
//# sourceMappingURL=discord.js.map