interface DiscordBotOptions {
    token: string;
    channelId: string;
}
interface DiscordWebhookOptions {
    webhookUrl: string;
}
export type DiscordOptions = DiscordBotOptions | DiscordWebhookOptions;
export interface DiscordEmbedFooter {
    text: string;
    icon_url?: string;
    proxy_icon_url?: string;
}
export interface DiscordEmbedImage {
    url?: string;
    proxy_url?: string;
    height?: number;
    width?: number;
}
export interface DiscordEmbedThumbnail {
    url?: string;
    proxy_url?: string;
    height?: number;
    width?: number;
}
export interface DiscordEmbedVideo {
    url?: string;
    proxy_url?: string;
    height?: number;
    width?: number;
}
export interface DiscordEmbedProvider {
    name?: string;
    url?: string;
}
export interface DiscordEmbedAuthor {
    name?: string;
    url?: string;
    icon_url?: string;
    proxy_icon_url?: string;
}
export interface DiscordEmbedField {
    name: string;
    value: string;
    inline?: boolean;
}
export interface DiscordEmbed {
    title?: string;
    type?: 'rich' | 'image' | 'video' | 'gifv' | 'article' | 'link';
    description?: string;
    url?: string;
    timestamp?: string;
    color?: number;
    footer?: DiscordEmbedFooter;
    image?: DiscordEmbedImage;
    thumbnail?: DiscordEmbedThumbnail;
    video?: DiscordEmbedVideo;
    provider?: DiscordEmbedProvider;
    author?: DiscordEmbedAuthor;
    fields?: DiscordEmbedField[];
}
interface DiscordNormalMessage {
    content: string;
}
interface DiscordEmbedMessage {
    embeds: DiscordEmbed[];
}
interface DiscordFile {
    name: string;
    file: ArrayBuffer;
    contentType?: string;
    isSpoiler?: boolean;
}
interface DiscordFileMessage {
    file: DiscordFile;
}
declare const DiscordButtonStyles: {
    readonly Primary: 1;
    readonly Secondary: 2;
    readonly Success: 3;
    readonly Danger: 4;
    readonly Link: 5;
};
interface DiscordButton {
    type: 2;
    style: typeof DiscordButtonStyles.Link;
    label?: string;
    emoji?: {
        id?: string;
        name?: string;
        animated?: boolean;
    };
    url: string;
    disabled?: boolean;
}
interface DiscordComponent {
    type: 1;
    components: DiscordButton[];
}
interface DiscordComponentMessage {
    components: DiscordComponent[];
}
export declare const DiscordMessageFlag: {
    readonly SuppressEmbeds: number;
    readonly SuppressNotifications: number;
};
interface DiscordMessageFlags {
    flags: number;
}
export type DiscordMessage = DiscordNormalMessage | DiscordEmbedMessage | DiscordFileMessage | DiscordComponentMessage | DiscordMessageFlags;
export declare class Discord {
    private options;
    constructor(options: DiscordOptions);
    static get validations(): {
        [key: string]: (options: any) => boolean;
    };
    sendMessage(message: string | DiscordMessage): Promise<string>;
    private sendBot;
    private sendWebhook;
    editMessage(messageId: string, message: string | DiscordMessage): Promise<void>;
    private editBot;
    private editWebhook;
    private isDiscordBotOptions;
    private isDiscordWebhookOptions;
}
export {};
//# sourceMappingURL=discord.d.ts.map