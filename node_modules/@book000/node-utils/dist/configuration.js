"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigFramework = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const jsonc_parser_1 = require("jsonc-parser");
/**
 * 設定ファイルを管理するフレームワーククラス
 *
 * 設定ファイルは JSONC 形式でパースされる。
 *
 * @template IConfig 設定ファイルの型
 */
class ConfigFramework {
    /**
     * コンストラクタ
     *
     * ファイルの読み込みは行わない。{@link load} を呼び出すことで読み込む。
     *
     * 原則、以下の環境変数を利用する。値の場所にファイルがあればそれを利用する。
     * - CONFIG_PATH
     * - CONFIG_FILE
     * 環境変数に値が設定されておらず、設定ファイルのパスが path に指定されていてそのファイルがある場合はそのファイルを設定ファイルとして使用する
     * いずれの方法でもパスを取得できない場合はエラーを投げる
     *
     * @param path 設定ファイルのパス
     * @returns インスタンス
     */
    constructor(path) {
        this.validateFailures = [];
        const paths = [
            process.env.CONFIG_PATH,
            process.env.CONFIG_FILE,
            path,
        ].filter((p) => p !== undefined && node_fs_1.default.existsSync(p));
        if (paths.length === 0) {
            throw new Error('Config path not found');
        }
        this.path = paths[0];
    }
    /**
     * 設定ファイルを読み込む
     *
     * 設定ファイルのパスはコンストラクタで指定されたものが利用される。
     * この関数内ではバリデーションは行わないので、{@link validate} を呼び出す必要がある。
     */
    load() {
        const data = node_fs_1.default.readFileSync(this.path, 'utf8');
        const json = (0, jsonc_parser_1.parse)(data);
        this.config = json;
    }
    /**
     * 設定ファイルのバリデーションを行う
     *
     * この関数を呼び出す前に、{@link load} を呼び出して設定ファイルを読み込んでおく必要がある。
     * バリデーションに失敗した場合は、{@link getValidateFailures} で失敗した項目を取得できる。
     *
     * @returns バリデーションに成功した場合は true、失敗した場合は false
     */
    validate() {
        if (!this.config)
            throw new Error('Config not loaded');
        this.validateFailures = [];
        const validates = this.validates();
        for (const key in validates) {
            try {
                if (!validates[key](this.config)) {
                    this.validateFailures.push(key);
                }
            }
            catch {
                this.validateFailures.push(key);
            }
        }
        return this.validateFailures.length === 0;
    }
    /**
     * バリデーションに失敗した項目を取得する
     *
     * @returns バリデーションに失敗した項目の配列
     */
    getValidateFailures() {
        return this.validateFailures;
    }
    /**
     * 設定の値を取得する
     *
     * @param key 設定のキー
     * @returns 設定の値
     */
    get(key) {
        if (!this.config)
            throw new Error('Config not loaded');
        return this.config[key];
    }
}
exports.ConfigFramework = ConfigFramework;
//# sourceMappingURL=configuration.js.map