import { GetUserByScreenNameOptions, LikeTweetOptions, SearchTweetsOptions, GetUserLikeTweetsOptions, GetUserTweetsOptions, GetScreenNameByUserIdOptions, GetUserByUserIdOptions, UnlikeTweetOptions, GetHomeTimelineTweetsOptions, BlockUserOptions, UnblockUserOptions } from './options';
import { TwitterScraper, TwitterScraperOptions } from './scraper';
import { GraphQLGetUserByScreenNameSuccessResponse } from './models/responses/graphql/get/user-by-screen-name-success';
import { FullUser, Status } from 'twitter-d';
import { CustomTweetObject } from './models/responses/custom/custom-tweet-object';
/**
 * {@link TwitterOptions} オプション
 */
export type TwitterOptions = TwitterScraperOptions;
/**
 * Twitter スクレイピングライブラリクラス
 */
export declare class Twitter {
    readonly scraper: TwitterScraper;
    /**
     * @param scraper {@link TwitterScraper} インスタンス
     */
    private constructor();
    /**
     * Twitter にログインする
     *
     * @param options ログインオプション
     * @returns Twitter インスタンス
     */
    static login(options: TwitterOptions): Promise<Twitter>;
    /**
     * スクリーンネームからユーザー情報を取得する
     *
     * @param options ユーザー情報取得オプション
     * @returns ユーザー情報
     */
    getUserByScreenName(options: GetUserByScreenNameOptions): Promise<GraphQLGetUserByScreenNameSuccessResponse>;
    /**
     * ユーザー ID からスクリーンネームを取得する
     *
     * @param userId ユーザー ID
     * @returns スクリーンネーム
     */
    getScreenNameByUserId(options: GetScreenNameByUserIdOptions): Promise<string>;
    /**
     * ユーザー ID からスクリーンネームを取得する
     *
     * @param userId ユーザー ID
     * @returns スクリーンネーム
     */
    getUserByUserId(options: GetUserByUserIdOptions): Promise<FullUser>;
    /**
     * ユーザー ID からユーザー情報を取得する。ユーザー情報は生レスポンスで返す
     *
     * @param userId ユーザー ID
     * @returns ユーザー情報（生レスポンス）
     */
    getRawUserByUserId(options: GetUserByUserIdOptions): Promise<GraphQLGetUserByScreenNameSuccessResponse>;
    /**
     * ホームタイムラインのツイートを取得する。
     *
     * @param options ホームタイムライン取得オプション
     * @returns ホームタイムラインのツイート
     */
    getHomeTimelineTweets(options: GetHomeTimelineTweetsOptions): Promise<Status[]>;
    /**
     * ホームタイムラインのツイートを取得する。ツイートは非正規化ツイート（CustomTweetObject）で返す
     *
     * @param options ホームタイムライン取得オプション
     * @returns ホームタイムラインのツイート（非正規化ツイート）
     */
    getHomeTimelineRawTweets(options: GetHomeTimelineTweetsOptions): Promise<CustomTweetObject[]>;
    /**
     * ツイートを検索する。
     *
     * @param options 検索オプション
     * @returns 検索結果
     */
    searchTweets(options: SearchTweetsOptions): Promise<Status[]>;
    /**
     * ツイートを検索する。ツイートは非正規化ツイート（CustomTweetObject）で返す
     *
     * @param options 検索オプション
     * @returns 検索結果（非正規化ツイート）
     */
    searchRawTweets(options: SearchTweetsOptions): Promise<CustomTweetObject[]>;
    /**
     * ユーザーのツイートを取得する
     *
     * @param options ユーザーツイート取得オプション
     * @returns ユーザーのツイート
     */
    getUserTweets(options: GetUserTweetsOptions): Promise<Status[]>;
    /**
     * ユーザーのいいねしたツイートを取得する
     *
     * @param options ユーザーいいねツイート取得オプション
     * @returns ユーザーのツイート
     */
    getUserLikeTweets(options: GetUserLikeTweetsOptions): Promise<Status[]>;
    /**
     * ツイートをいいねする
     *
     * @param options いいねオプション
     * @returns いいねできたかどうかの文字列（Done）
     */
    likeTweet(options: LikeTweetOptions): Promise<string | undefined>;
    /**
     * ツイートのいいねを解除する
     *
     * @param options いいね解除オプション
     * @returns いいね解除できたかどうかの文字列（Done）
     */
    unlikeTweet(options: UnlikeTweetOptions): Promise<string | undefined>;
    /**
     * ユーザーをブロックする
     *
     * @param options ブロックオプション
     */
    blockUser(options: BlockUserOptions): Promise<void>;
    /**
     * ユーザーのブロックを解除する
     *
     * @param options ブロック解除オプション
     */
    unblockUser(options: UnblockUserOptions): Promise<void>;
    /**
     * ブラウザを閉じる
     */
    close(): Promise<void>;
    /**
     * エラーレスポンスかどうかを判定する。
     * これを使うことでエラーがどうかは判定できるが、レスポンス型は保証されないので利用側で型保証されるメソッドを書いたほうがよい。
     *
     * @param response レスポンス
     * @returns エラーレスポンスかどうか
     */
    isErrorResponse(response: any): response is {
        errors: any[];
    };
    private getUserStatus;
}
//# sourceMappingURL=twitter.d.ts.map