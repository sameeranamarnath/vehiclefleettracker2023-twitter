"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_utils_1 = require("@book000/node-utils");
const types_generator_1 = require("./generate-types/types-generator");
const custom_types_generator_1 = require("./generate-types/custom-types-generator");
const endpoint_type_generator_1 = require("./generate-types/endpoint-type-generator");
const utils_1 = require("./generate-types/utils");
class GenerateTypes {
    calculateTime(name, runner) {
        const logger = node_utils_1.Logger.configure('GenerateTypes:calculateTime');
        const startTime = Date.now();
        const result = runner();
        const endTime = Date.now();
        const time = endTime - startTime;
        logger.info(`🕐 ${name}: ${time}ms`);
        return result;
    }
    async awaitCalculateTime(name, runner) {
        const logger = node_utils_1.Logger.configure('GenerateTypes:awaitCalculateTime');
        const startTime = Date.now();
        const result = await runner();
        const endTime = Date.now();
        const time = endTime - startTime;
        logger.info(`🕐 ${name}: ${time}ms`);
        return result;
    }
    async run() {
        const logger = node_utils_1.Logger.configure('GenerateTypes:run');
        const debugOutputDirectory = process.env.DEBUG_OUTPUT_DIRECTORY || './data/responses';
        const schemaDirectory = process.env.SCHEMA_DIRECTORY || './data/schema';
        const typesDirectory = process.env.TYPES_DIRECTORY || './src/models/responses';
        const isAllParallel = process.env.IS_ALL_PARALLEL === 'true';
        const isTypesGenerateParallel = isAllParallel || process.env.IS_TYPES_GENERATE_PARALLEL === 'true';
        const isCustomTypeGenerateParallel = isAllParallel || process.env.IS_CUSTOM_TYPE_GENERATE_PARALLEL === 'true';
        logger.info('📁 Directories');
        logger.info(`  📂 Debug output: ${debugOutputDirectory}`);
        logger.info(`  📂 Schema: ${schemaDirectory}`);
        logger.info(`  📂 Types: ${typesDirectory}`);
        logger.info('🔧 Options');
        logger.info(`  📌 All parallel: ${isAllParallel}`);
        logger.info(`  📌 Types generate parallel: ${isTypesGenerateParallel}`);
        logger.info(`  📌 Custom type generate parallel: ${isCustomTypeGenerateParallel}`);
        try {
            // msで計測
            const results = this.calculateTime('GetEndPointResponses', () => utils_1.Utils.getEndPointResponses(debugOutputDirectory));
            await this.awaitCalculateTime('TwitterTypesGenerator', () => new types_generator_1.TwitterTypesGenerator(results).generateTypes({
                directory: {
                    schema: schemaDirectory,
                    types: typesDirectory,
                },
                parallel: isTypesGenerateParallel,
            }));
            await this.awaitCalculateTime('CustomTypesGenerator', () => new custom_types_generator_1.CustomTypesGenerator(results, schemaDirectory, typesDirectory).generate(isCustomTypeGenerateParallel));
            this.calculateTime('EndPointTypeGenerator', () => new endpoint_type_generator_1.EndPointTypeGenerator(results, typesDirectory).generate());
        }
        catch (error) {
            logger.error('An error occurred while generating types', error);
        }
    }
}
;
(async () => {
    new GenerateTypes().run();
})();
//# sourceMappingURL=generate-types.js.map