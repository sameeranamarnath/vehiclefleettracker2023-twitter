"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = require("node:path");
const search_timeline_1 = require("./search-timeline");
const user_tweets_1 = require("./user-tweets");
const utils_1 = require("../generate-types/utils");
const home_timeline_parser_1 = require("./home-timeline-parser");
const user_like_tweets_1 = require("./user-like-tweets");
jest.setTimeout(60000);
describe('Parser', () => {
    const debugOutputDirectory = process.env.DEBUG_OUTPUT_DIRECTORY || './data/responses';
    test('HomeTimelineParser:HomeTimeline', () => {
        const baseDirectory = `${debugOutputDirectory}/graphql/HomeTimeline/GET/200/`;
        if (!node_fs_1.default.existsSync(baseDirectory)) {
            return;
        }
        const files = node_fs_1.default
            .readdirSync(baseDirectory)
            .filter((file) => !['.', '..'].includes(file) &&
            node_fs_1.default.statSync((0, node_path_1.join)(baseDirectory, file)).isFile() &&
            file.endsWith('.json'))
            .map((file) => (0, node_path_1.join)(baseDirectory, file));
        for (const file of files) {
            const response = utils_1.Utils.parseJsonc(node_fs_1.default.readFileSync(file, 'utf8'));
            expect(() => new home_timeline_parser_1.HomeTimelineParser(response, true), `Failed parse ${file}`).not.toThrow();
        }
    });
    test('HomeTimelineParser:HomeLatestTimeline', () => {
        const baseDirectory = `${debugOutputDirectory}/graphql/HomeLatestTimeline/GET/200/`;
        if (!node_fs_1.default.existsSync(baseDirectory)) {
            return;
        }
        const files = node_fs_1.default
            .readdirSync(baseDirectory)
            .filter((file) => !['.', '..'].includes(file) &&
            node_fs_1.default.statSync((0, node_path_1.join)(baseDirectory, file)).isFile() &&
            file.endsWith('.json'))
            .map((file) => (0, node_path_1.join)(baseDirectory, file));
        for (const file of files) {
            const response = utils_1.Utils.parseJsonc(node_fs_1.default.readFileSync(file, 'utf8'));
            expect(() => new home_timeline_parser_1.HomeTimelineParser(response, true), `Failed parse ${file}`).not.toThrow();
        }
    });
    test('SearchTimelineParser', () => {
        const baseDirectory = `${debugOutputDirectory}/graphql/SearchTimeline/GET/200/`;
        if (!node_fs_1.default.existsSync(baseDirectory)) {
            return;
        }
        const files = node_fs_1.default
            .readdirSync(baseDirectory)
            .filter((file) => !['.', '..'].includes(file) &&
            node_fs_1.default.statSync((0, node_path_1.join)(baseDirectory, file)).isFile() &&
            file.endsWith('.json'))
            .map((file) => (0, node_path_1.join)(baseDirectory, file));
        for (const file of files) {
            const response = utils_1.Utils.parseJsonc(node_fs_1.default.readFileSync(file, 'utf8'));
            expect(() => new search_timeline_1.SearchTimelineParser(response, true), `Failed parse ${file}`).not.toThrow();
        }
    });
    test('UserLikeTweetsParser', () => {
        const baseDirectory = `${debugOutputDirectory}/graphql/Likes/GET/200/`;
        if (!node_fs_1.default.existsSync(baseDirectory)) {
            return;
        }
        const files = node_fs_1.default
            .readdirSync(baseDirectory)
            .filter((file) => !['.', '..'].includes(file) &&
            node_fs_1.default.statSync((0, node_path_1.join)(baseDirectory, file)).isFile() &&
            file.endsWith('.json'))
            .map((file) => (0, node_path_1.join)(baseDirectory, file));
        for (const file of files) {
            const response = utils_1.Utils.parseJsonc(node_fs_1.default.readFileSync(file, 'utf8'));
            if ('errors' in response &&
                !!response.errors &&
                response.errors.length > 0) {
                continue;
            }
            expect(() => new user_like_tweets_1.UserLikeTweetsParser(response, true), `Failed parse ${file}`).not.toThrow();
        }
    });
    test('UserTweetsParser', () => {
        const baseDirectory = `${debugOutputDirectory}/graphql/UserTweets/GET/200/`;
        if (!node_fs_1.default.existsSync(baseDirectory)) {
            return;
        }
        const files = node_fs_1.default
            .readdirSync(baseDirectory)
            .filter((file) => !['.', '..'].includes(file) &&
            node_fs_1.default.statSync((0, node_path_1.join)(baseDirectory, file)).isFile() &&
            file.endsWith('.json'))
            .map((file) => (0, node_path_1.join)(baseDirectory, file));
        for (const file of files) {
            const response = utils_1.Utils.parseJsonc(node_fs_1.default.readFileSync(file, 'utf8'));
            expect(() => new user_tweets_1.UserTweetsParser(response, true), `Failed parse ${file}`).not.toThrow();
        }
    });
});
//# sourceMappingURL=parser.test.js.map