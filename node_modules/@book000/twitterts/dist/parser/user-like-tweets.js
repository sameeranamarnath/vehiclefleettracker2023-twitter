"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserLikeTweetsParser = void 0;
const converter_1 = require("../converter");
const base_1 = require("./base");
const exceptions_1 = require("../models/exceptions");
/**
 * {@link Twitter.getUserLikeTweets} のレスポンスパーサー
 */
class UserLikeTweetsParser extends base_1.BaseParser {
    /**
     * @param response {@link Twitter['getUserLikeTweets']} のレスポンス
     */
    constructor(response, isIncludingPromotedTweets) {
        super(response);
        this.tweets = [];
        if (this.isErrorResponse(this.response)) {
            throw new exceptions_1.TwitterOperationError(this.response.errors[0].message);
        }
        const entries = this.response.data.user.result.timeline_v2.timeline.instructions
            .filter((instruction) => instruction.type === 'TimelineAddEntries' && instruction.entries)
            .flatMap((instruction) => instruction.entries?.filter((entry) => entry.entryId.startsWith('tweet-') ||
            (isIncludingPromotedTweets
                ? entry.entryId.startsWith('promoted-tweet') ||
                    entry.entryId.startsWith('promotedTweet')
                : false)));
        const rawTweets = entries
            .map((entry) => entry.content.itemContent.tweet_results.result)
            .filter((tweet) => !!tweet);
        this.tweets = rawTweets.map((tweet) => converter_1.ObjectConverter.convertToStatus(tweet));
    }
    /**
     * 検索結果のツイート群を取得する
     *
     * @returns ツイートの配列
     */
    getTweets() {
        return this.tweets;
    }
    isErrorResponse(response) {
        return ('errors' in response && !!response.errors && response.errors.length > 0);
    }
}
exports.UserLikeTweetsParser = UserLikeTweetsParser;
//# sourceMappingURL=user-like-tweets.js.map