import { Browser, Page } from 'puppeteer-core';
import { EndPointResponseType, GraphQLEndpoint } from './models/responses/endpoints';
/**
 * HTTP メソッド
 */
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
/**
 * レスポンス種別
 */
export type RequestType = 'REST' | 'GRAPHQL';
/**
 * レスポンスの詳細
 */
interface ResponseDetails {
    /**
     * リクエストのキー（${type}_${name}_${method} の大文字）
     */
    key: string;
    /**
     * リクエストの種別（REST | GRAPHQL）
     */
    type: RequestType;
    /**
     * リクエストの HTTP メソッド（GET | POST | PUT | DELETE | PATCH）
     */
    method: HttpMethod;
    /**
     * リクエスト名
     */
    name: string;
    /**
     * レスポンステキスト
     */
    text: string;
}
/**
 * レスポンスデバッグ出力オプション
 *
 * ${outputDirectory}/${type}/${name}/${method}/${timestamp}.json に出力されます。
 */
export interface TwitterScraperDebugOutputResponseOptions {
    /**
     * レスポンスをファイルに出力するか
     */
    enable: boolean;
    /**
     * レスポンスを出力するディレクトリ
     */
    outputDirectory: string;
    /**
     * レスポンス時に実行されるコールバック関数
     *
     * @param details レスポンスの詳細
     */
    onResponse?: (details: ResponseDetails) => void;
}
/**
 * デバッグオプション
 */
export interface TwitterScraperDebugOptions {
    /**
     * レスポンスデバッグ出力オプション
     *
     * 指定しない場合はデバッグ出力されません。
     */
    outputResponse?: TwitterScraperDebugOutputResponseOptions;
}
/**
 * Puppeteer プロキシオプション
 */
export interface PuppeteerProxyOptions {
    /**
     * プロキシサーバー URL
     */
    server: string;
    /**
     * プロキシサーバーのユーザー名
     */
    username?: string;
    /**
     * プロキシサーバーのパスワード
     */
    password?: string;
}
/**
 * Puppeteer オプション
 */
export interface PuppeteerOptions {
    /**
     * Puppeteer の実行ファイルパス
     *
     * 指定しない場合は chrome channel が使用されます。
     */
    executablePath?: string;
    /**
     * デフォルトのビューポート
     */
    defaultViewport?: {
        /**
         * ビューポートの幅
         */
        width: number;
        /**
         * ビューポートの高さ
         */
        height: number;
    };
    /**
     * ユーザーデータディレクトリ
     *
     * 指定しない場合は /data/userdata が使用されます。
     */
    userDataDirectory?: string;
    /**
     * DevTools を有効にするか
     */
    enableDevtools?: boolean;
    /**
     * プロキシ設定
     */
    proxy?: PuppeteerProxyOptions;
}
/**
 * {@link TwitterScraper} オプション
 */
export interface TwitterScraperOptions {
    /**
     * Twitter ユーザー名
     */
    username: string;
    /**
     * Twitter パスワード
     */
    password: string;
    /**
     * Twitter One Time Password シークレット
     */
    otpSecret?: string;
    /**
     * デバッグオプション
     */
    debugOptions?: TwitterScraperDebugOptions;
    /**
     * Puppeteer オプション
     */
    puppeteerOptions?: PuppeteerOptions;
}
/**
 * レスポンス取得オプション
 */
export interface TwitterScraperGetResponseOptions {
    /**
     * ページ遷移先 URL
     */
    url: string;
    /**
     * レスポンスを取得したいリクエストの HTTP メソッド
     */
    method: HttpMethod;
    /**
     * レスポンスを取得したいリクエストの種別
     */
    type: RequestType;
    /**
     * 取得処理のタイムアウト (ミリ秒)
     *
     * 指定しない場合は 30 秒でタイムアウトします。
     * タイムアウトした場合は 'Response timeout.' Error が throw されます。
     */
    timeout?: number;
}
/**
 * Twitter スクレイピング ページクラス
 */
export declare class TwitterScraperPage {
    /**
     * Puppeteer のページインスタンス
     */
    readonly page: Page;
    /**
     * レスポンスの保持オブジェクト
     */
    private readonly responses;
    /**
     * @param page Puppeteer のページ
     */
    constructor(page: Page);
    /**
     * 条件に一致するレスポンスをひとつのみ取得します。
     * 指定した timeout 値 (ミリ秒) でタイムアウトします。指定しない場合は 30 秒でタイムアウトします。
     *
     * @param options レスポンス取得オプション
     * @returns レスポンス
     */
    waitSingleResponse<M extends HttpMethod, T extends RequestType, N extends GraphQLEndpoint>(url: string | null, method: M, type: T, name: N, timeout?: number): Promise<EndPointResponseType<M, T, N>>;
    /**
     * 条件に一致するレスポンスをひとつ取得します。繰り返し呼び出すことで複数のレスポンスを取得できます。
     * waitSingleResponse と異なり、レスポンス待ちを行わず、ページ遷移もしません（goto メソッドによるページ遷移が必要です）。
     *
     * @param options レスポンス取得オプション
     * @returns レスポンス。一致するレスポンスがない場合は null
     */
    shiftResponse<M extends HttpMethod, T extends RequestType, N extends GraphQLEndpoint>(method: M, type: T, name: N): EndPointResponseType<M, T, N> | null;
    /**
     * 指定した URL に遷移します。
     *
     * @param url 遷移先 URL
     */
    goto(url: string): Promise<void>;
    /**
     * 要素を探し、描画範囲内に表示されるようにスクロールしたあと、クリックします。
     * 要素が検索処理は、指定した timeout 値 (ミリ秒) でタイムアウトします。指定しない場合は 30 秒でタイムアウトします。
     *
     * @param selector 要素のセレクタ
     */
    waitAndClick(selector: string, isEvaluate?: boolean, timeout?: number): Promise<void>;
    /**
     * リダイレクトを待ち、リダイレクト先の URL を返します。
     *
     * @param sourceUrl リダイレクト前の URL
     * @returns リダイレクト先の URL
     */
    getRedirectTo(sourceUrl: string, timeout?: number): Promise<string>;
    /**
     * ページの最下部までスクロールします。
     */
    scrollToBottom(): Promise<void>;
    /**
     * ページを閉じます。
     */
    close(): Promise<void>;
    /**
     * レスポンスを保持するようにハンドラを設定します。
     *
     * @param page Puppeteer ページインスタンス
     */
    private setRetentionResponse;
}
/**
 * Twitter スクレイピングクラス
 */
export declare class TwitterScraper {
    /**
     * Twitter スクレイピングオプション
     */
    private readonly options;
    /**
     * Puppeteer ブラウザインスタンス
     */
    private browser;
    /**
     * @param options Twitter スクレイピングオプション
     */
    constructor(options: TwitterScraperOptions);
    /**
     * Twitter にログインします。
     */
    login(): Promise<void>;
    /**
     * TwitterScraperPage インスタンスを作成します。
     *
     * @returns TwitterScraperPage インスタンス
     */
    getScraperPage(): Promise<TwitterScraperPage>;
    /**
     * ブラウザを閉じます。
     */
    close(): Promise<void>;
    getBrowser(): Browser | undefined;
    /**
     * Puppeteer ブラウザインスタンスを作成します。
     *
     * @returns Puppeteer ブラウザインスタンス
     */
    private createBrowser;
    /**
     * 新しいページを作成します。
     */
    private newPage;
    /**
     * レスポンスを自動保存するハンドラを設定します。
     *
     * @param page Puppeteer ページインスタンス
     */
    private setAutoSaveResponse;
    /**
     * 指定したセレクタの要素を取得します。
     *
     * @param page Puppeteer ページインスタンス
     * @param selector セレクタ
     * @param timeout タイムアウトミリ秒
     * @returns 要素。見つからなかった場合は null
     */
    private getElement;
    /**
     * シークレットをもとに OTP を生成します。
     *
     * @param secret シークレット
     * @returns OTP コード
     */
    private getOneTimePassword;
}
export {};
//# sourceMappingURL=scraper.d.ts.map