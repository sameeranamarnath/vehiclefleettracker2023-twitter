import { Result } from './utils';
/**
 * レスポンス種別
 */
type RequestType = 'GraphQL';
/**
 * エンドポイントのまとめ型定義（src/models/responses/endpoints.ts）を生成するクラス
 */
export declare class EndPointTypeGenerator {
    private readonly results;
    private readonly typesDirectory;
    /**
     * @param results エンドポイントごとのレスポンス情報
     * @param typesDirectory 型定義の出力先ディレクトリ
     */
    constructor(results: Result[], typesDirectory: string);
    /**
     * TypeScript インポート文群を生成する
     *
     * @returns インポート文群
     */
    generateImport(): string;
    /**
     * メソッド名の配列を取得する
     *
     * @param type エンドポイントの種類
     * @returns メソッド名の配列
     */
    getMethods(type: RequestType): string[];
    /**
     * エンドポイント名群（<TYPE><METHOD>Endpoint）の定義を生成する
     *
     * @param type エンドポイントの種類
     * @param method メソッド名
     * @returns エンドポイント名群の定義
     */
    generateEndPointType(type: RequestType, method: string): string | null;
    /**
     * エンドポイント名を元に、成功・失敗のレスポンス型定義をまとめる型定義（<TYPE><METHOD>Response）を生成する。
     *
     * @param type エンドポイントの種類
     * @param method メソッド名
     */
    generateResponseMergeType(type: RequestType, method: string): string;
    /**
     * エンドポイント名を元に、レスポンス型定義を紐づけるような型定義（<TYPE><METHOD>EndPointResponseType）を生成する。
     *
     * @param type エンドポイントの種類
     * @param method メソッド名
     * @returns レスポンス型定義を紐づけるような型定義
     */
    generateResponseType(type: RequestType, method: string): string;
    /**
     * エンドポイントの種類と HTTP メソッドを元に、「レスポンス型定義を紐づけるような型定義」を生成する。
     *
     * @param types エンドポイントの種類の配列
     * @returns レスポンス型定義を紐づけるような型定義
     */
    generateEndpointResponseType(types: readonly RequestType[]): string;
    /**
     * エンドポイントのまとめ型定義（src/models/responses/endpoints.ts）を生成する
     */
    generate(): void;
}
export {};
//# sourceMappingURL=endpoint-type-generator.d.ts.map