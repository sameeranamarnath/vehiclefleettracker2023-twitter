import { Options } from 'json-schema-to-typescript';
/**
 * レスポンスファイル群からの、エンドポイントごとのレスポンス群型
 */
export interface Result {
    /**
     * エンドポイントの種別（graphql または rest）
     */
    type: string;
    /**
     * レスポンスの名前
     */
    name: string;
    /**
     * レスポンスの HTTP メソッド
     */
    method: string;
    /**
     * レスポンスのステータスコード
     */
    statusCode: string;
    /**
     * このエンドポイントに該当するレスポンスのパス群
     */
    paths: string[];
}
/**
 * ユーティリティ
 */
export declare const Utils: {
    /**
     * JSONC をパースする
     *
     * @param data パースする JSONC 文字列
     * @returns パース結果
     */
    parseJsonc<T = any>(data: string): T;
    /**
     * ディレクトリ内にあるディレクトリ群を取得する
     *
     * @param parentDirectory ディレクトリを取得する親ディレクトリパス
     * @param baseDirectories ディレクトリを取得する子ディレクトリパス群
     * @returns ディレクトリ群
     */
    getDirectories(parentDirectory: string, baseDirectories?: string[]): string[];
    /**
     * ディレクトリ内にある JSON ファイル群を取得する
     *
     * @param parentDirectory ファイルを取得する親ディレクトリパス
     * @param baseDirectories ファイルを取得するディレクトリパス
     * @returns JSON ファイル群
     */
    getJSONFiles(parentDirectory: string, baseDirectories?: string[]): string[];
    /**
     * レスポンスデバッグ出力 JSON ファイルを元に、エンドポイントごとの情報をまとめて取得する
     *
     * @returns エンドポイントごとの情報
     */
    getEndPointResponses(debugOutputDirectory: string): Result[];
    /**
     * レスポンスの型定義名を取得する
     *
     * @param rawType リクエストの種別（graphql または rest）
     * @param rawName レスポンスの名前
     * @param rawMethod レスポンスの HTTP メソッド
     * @param rawStatus レスポンスのステータスコード
     * @returns 型定義名
     */
    getName(rawType: string, rawName: string, rawMethod: string, rawStatus: string | null): string;
    /**
     * キャメルケースに変換する
     *
     * @param string 変換する文字列
     * @returns キャメルケース変換後の文字列
     */
    toCamelCase(string: string): string;
    /**
     * 先頭文字を大文字に変換する
     *
     * @param string 変換する文字列
     * @returns 変換後の文字列
     */
    capitalize(string: string): string;
    /**
     * ファイル名を取得する
     *
     * @param rawType リクエストの種別（graphql または rest）
     * @param rawName レスポンスの名前
     * @param rawMethod レスポンスの HTTP メソッド
     * @param rawStatus レスポンスのステータスコード
     * @returns ファイル名
     */
    getFilename(rawType: string, rawName: string, rawMethod: string, rawStatus: string): string;
    /**
     * json-schema-to-typescript のコンパイルオプションを作成・取得する
     *
     * @param tsDocument コンパイル結果の先頭に追加する tsdoc
     * @returns コンパイルオプション
     */
    getCompileOptions(tsDocument?: string): Partial<Options>;
};
//# sourceMappingURL=utils.d.ts.map