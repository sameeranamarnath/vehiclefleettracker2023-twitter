"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelErrorToJSON = exports.ModelErrorFromJSONTyped = exports.ModelErrorFromJSON = exports.instanceOfModelError = void 0;
var ErrorExtensions_1 = require("./ErrorExtensions");
var Location_1 = require("./Location");
var Tracing_1 = require("./Tracing");
/**
 * Check if a given object implements the ModelError interface.
 */
function instanceOfModelError(value) {
    var isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "extensions" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "locations" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "retryAfter" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "tracing" in value;
    return isInstance;
}
exports.instanceOfModelError = instanceOfModelError;
function ModelErrorFromJSON(json) {
    return ModelErrorFromJSONTyped(json, false);
}
exports.ModelErrorFromJSON = ModelErrorFromJSON;
function ModelErrorFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': json['code'],
        'extensions': (0, ErrorExtensions_1.ErrorExtensionsFromJSON)(json['extensions']),
        'kind': json['kind'],
        'locations': (json['locations'].map(Location_1.LocationFromJSON)),
        'message': json['message'],
        'name': json['name'],
        'path': json['path'],
        'retryAfter': json['retry_after'],
        'source': json['source'],
        'tracing': (0, Tracing_1.TracingFromJSON)(json['tracing']),
    };
}
exports.ModelErrorFromJSONTyped = ModelErrorFromJSONTyped;
function ModelErrorToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'extensions': (0, ErrorExtensions_1.ErrorExtensionsToJSON)(value.extensions),
        'kind': value.kind,
        'locations': (value.locations.map(Location_1.LocationToJSON)),
        'message': value.message,
        'name': value.name,
        'path': value.path,
        'retry_after': value.retryAfter,
        'source': value.source,
        'tracing': (0, Tracing_1.TracingToJSON)(value.tracing),
    };
}
exports.ModelErrorToJSON = ModelErrorToJSON;
//# sourceMappingURL=ModelError.js.map