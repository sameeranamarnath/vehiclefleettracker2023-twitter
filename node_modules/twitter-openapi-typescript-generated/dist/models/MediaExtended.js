"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaExtendedToJSON = exports.MediaExtendedFromJSONTyped = exports.MediaExtendedFromJSON = exports.instanceOfMediaExtended = exports.MediaExtendedTypeEnum = void 0;
var runtime_1 = require("../runtime");
var AdditionalMediaInfo_1 = require("./AdditionalMediaInfo");
var ExtMediaAvailability_1 = require("./ExtMediaAvailability");
var MediaOriginalInfo_1 = require("./MediaOriginalInfo");
var MediaSizes_1 = require("./MediaSizes");
var MediaStats_1 = require("./MediaStats");
var MediaVideoInfo_1 = require("./MediaVideoInfo");
/**
 * @export
 */
exports.MediaExtendedTypeEnum = {
    Photo: 'photo',
    Video: 'video',
    AnimatedGif: 'animated_gif'
};
/**
 * Check if a given object implements the MediaExtended interface.
 */
function instanceOfMediaExtended(value) {
    var isInstance = true;
    isInstance = isInstance && "displayUrl" in value;
    isInstance = isInstance && "expandedUrl" in value;
    isInstance = isInstance && "idStr" in value;
    isInstance = isInstance && "indices" in value;
    isInstance = isInstance && "mediaKey" in value;
    isInstance = isInstance && "mediaUrlHttps" in value;
    isInstance = isInstance && "originalInfo" in value;
    isInstance = isInstance && "sizes" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "url" in value;
    return isInstance;
}
exports.instanceOfMediaExtended = instanceOfMediaExtended;
function MediaExtendedFromJSON(json) {
    return MediaExtendedFromJSONTyped(json, false);
}
exports.MediaExtendedFromJSON = MediaExtendedFromJSON;
function MediaExtendedFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'additionalMediaInfo': !(0, runtime_1.exists)(json, 'additional_media_info') ? undefined : (0, AdditionalMediaInfo_1.AdditionalMediaInfoFromJSON)(json['additional_media_info']),
        'displayUrl': json['display_url'],
        'expandedUrl': json['expanded_url'],
        'extMediaAvailability': !(0, runtime_1.exists)(json, 'ext_media_availability') ? undefined : (0, ExtMediaAvailability_1.ExtMediaAvailabilityFromJSON)(json['ext_media_availability']),
        'features': !(0, runtime_1.exists)(json, 'features') ? undefined : json['features'],
        'idStr': json['id_str'],
        'indices': json['indices'],
        'mediaStats': !(0, runtime_1.exists)(json, 'mediaStats') ? undefined : (0, MediaStats_1.MediaStatsFromJSON)(json['mediaStats']),
        'mediaKey': json['media_key'],
        'mediaUrlHttps': json['media_url_https'],
        'originalInfo': (0, MediaOriginalInfo_1.MediaOriginalInfoFromJSON)(json['original_info']),
        'sizes': (0, MediaSizes_1.MediaSizesFromJSON)(json['sizes']),
        'type': json['type'],
        'url': json['url'],
        'videoInfo': !(0, runtime_1.exists)(json, 'video_info') ? undefined : (0, MediaVideoInfo_1.MediaVideoInfoFromJSON)(json['video_info']),
    };
}
exports.MediaExtendedFromJSONTyped = MediaExtendedFromJSONTyped;
function MediaExtendedToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'additional_media_info': (0, AdditionalMediaInfo_1.AdditionalMediaInfoToJSON)(value.additionalMediaInfo),
        'display_url': value.displayUrl,
        'expanded_url': value.expandedUrl,
        'ext_media_availability': (0, ExtMediaAvailability_1.ExtMediaAvailabilityToJSON)(value.extMediaAvailability),
        'features': value.features,
        'id_str': value.idStr,
        'indices': value.indices,
        'mediaStats': (0, MediaStats_1.MediaStatsToJSON)(value.mediaStats),
        'media_key': value.mediaKey,
        'media_url_https': value.mediaUrlHttps,
        'original_info': (0, MediaOriginalInfo_1.MediaOriginalInfoToJSON)(value.originalInfo),
        'sizes': (0, MediaSizes_1.MediaSizesToJSON)(value.sizes),
        'type': value.type,
        'url': value.url,
        'video_info': (0, MediaVideoInfo_1.MediaVideoInfoToJSON)(value.videoInfo),
    };
}
exports.MediaExtendedToJSON = MediaExtendedToJSON;
//# sourceMappingURL=MediaExtended.js.map