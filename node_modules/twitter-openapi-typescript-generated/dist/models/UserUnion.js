"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserUnionToJSON = exports.UserUnionFromJSONTyped = exports.UserUnionFromJSON = void 0;
var User_1 = require("./User");
var UserUnavailable_1 = require("./UserUnavailable");
function UserUnionFromJSON(json) {
    return UserUnionFromJSONTyped(json, false);
}
exports.UserUnionFromJSON = UserUnionFromJSON;
function UserUnionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['__typename']) {
        case 'User':
            return __assign(__assign({}, (0, User_1.UserFromJSONTyped)(json, true)), { typename: 'User' });
        case 'UserUnavailable':
            return __assign(__assign({}, (0, UserUnavailable_1.UserUnavailableFromJSONTyped)(json, true)), { typename: 'UserUnavailable' });
        default:
            throw new Error("No variant of UserUnion exists with 'typename=".concat(json['typename'], "'"));
    }
}
exports.UserUnionFromJSONTyped = UserUnionFromJSONTyped;
function UserUnionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['typename']) {
        case 'User':
            return (0, User_1.UserToJSON)(value);
        case 'UserUnavailable':
            return (0, UserUnavailable_1.UserUnavailableToJSON)(value);
        default:
            throw new Error("No variant of UserUnion exists with 'typename=".concat(value['typename'], "'"));
    }
}
exports.UserUnionToJSON = UserUnionToJSON;
//# sourceMappingURL=UserUnion.js.map