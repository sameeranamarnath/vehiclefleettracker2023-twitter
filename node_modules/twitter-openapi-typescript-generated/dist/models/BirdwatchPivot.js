"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BirdwatchPivotToJSON = exports.BirdwatchPivotFromJSONTyped = exports.BirdwatchPivotFromJSON = exports.instanceOfBirdwatchPivot = exports.BirdwatchPivotVisualStyleEnum = exports.BirdwatchPivotIconTypeEnum = void 0;
var runtime_1 = require("../runtime");
var BirdwatchPivotFooter_1 = require("./BirdwatchPivotFooter");
var BirdwatchPivotNote_1 = require("./BirdwatchPivotNote");
var BirdwatchPivotSubtitle_1 = require("./BirdwatchPivotSubtitle");
/**
 * @export
 */
exports.BirdwatchPivotIconTypeEnum = {
    BirdwatchV1Icon: 'BirdwatchV1Icon'
};
/**
 * @export
 */
exports.BirdwatchPivotVisualStyleEnum = {
    Default: 'Default'
};
/**
 * Check if a given object implements the BirdwatchPivot interface.
 */
function instanceOfBirdwatchPivot(value) {
    var isInstance = true;
    isInstance = isInstance && "destinationUrl" in value;
    isInstance = isInstance && "footer" in value;
    isInstance = isInstance && "iconType" in value;
    isInstance = isInstance && "note" in value;
    isInstance = isInstance && "shorttitle" in value;
    isInstance = isInstance && "subtitle" in value;
    isInstance = isInstance && "title" in value;
    return isInstance;
}
exports.instanceOfBirdwatchPivot = instanceOfBirdwatchPivot;
function BirdwatchPivotFromJSON(json) {
    return BirdwatchPivotFromJSONTyped(json, false);
}
exports.BirdwatchPivotFromJSON = BirdwatchPivotFromJSON;
function BirdwatchPivotFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'destinationUrl': json['destinationUrl'],
        'footer': (0, BirdwatchPivotFooter_1.BirdwatchPivotFooterFromJSON)(json['footer']),
        'iconType': json['iconType'],
        'note': (0, BirdwatchPivotNote_1.BirdwatchPivotNoteFromJSON)(json['note']),
        'shorttitle': json['shorttitle'],
        'subtitle': (0, BirdwatchPivotSubtitle_1.BirdwatchPivotSubtitleFromJSON)(json['subtitle']),
        'title': json['title'],
        'visualStyle': !(0, runtime_1.exists)(json, 'visualStyle') ? undefined : json['visualStyle'],
    };
}
exports.BirdwatchPivotFromJSONTyped = BirdwatchPivotFromJSONTyped;
function BirdwatchPivotToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'destinationUrl': value.destinationUrl,
        'footer': (0, BirdwatchPivotFooter_1.BirdwatchPivotFooterToJSON)(value.footer),
        'iconType': value.iconType,
        'note': (0, BirdwatchPivotNote_1.BirdwatchPivotNoteToJSON)(value.note),
        'shorttitle': value.shorttitle,
        'subtitle': (0, BirdwatchPivotSubtitle_1.BirdwatchPivotSubtitleToJSON)(value.subtitle),
        'title': value.title,
        'visualStyle': value.visualStyle,
    };
}
exports.BirdwatchPivotToJSON = BirdwatchPivotToJSON;
//# sourceMappingURL=BirdwatchPivot.js.map