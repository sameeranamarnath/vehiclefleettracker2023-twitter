"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineShowAlertToJSON = exports.TimelineShowAlertFromJSONTyped = exports.TimelineShowAlertFromJSON = exports.instanceOfTimelineShowAlert = exports.TimelineShowAlertDisplayLocationEnum = exports.TimelineShowAlertAlertTypeEnum = void 0;
var runtime_1 = require("../runtime");
var InstructionType_1 = require("./InstructionType");
var TimelineShowAlertRichText_1 = require("./TimelineShowAlertRichText");
var UserResults_1 = require("./UserResults");
/**
 * @export
 */
exports.TimelineShowAlertAlertTypeEnum = {
    NewTweets: 'NewTweets'
};
/**
 * @export
 */
exports.TimelineShowAlertDisplayLocationEnum = {
    Top: 'Top'
};
/**
 * Check if a given object implements the TimelineShowAlert interface.
 */
function instanceOfTimelineShowAlert(value) {
    var isInstance = true;
    isInstance = isInstance && "richText" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "usersResults" in value;
    return isInstance;
}
exports.instanceOfTimelineShowAlert = instanceOfTimelineShowAlert;
function TimelineShowAlertFromJSON(json) {
    return TimelineShowAlertFromJSONTyped(json, false);
}
exports.TimelineShowAlertFromJSON = TimelineShowAlertFromJSON;
function TimelineShowAlertFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'alertType': !(0, runtime_1.exists)(json, 'alertType') ? undefined : json['alertType'],
        'colorConfig': !(0, runtime_1.exists)(json, 'colorConfig') ? undefined : json['colorConfig'],
        'displayDurationMs': !(0, runtime_1.exists)(json, 'displayDurationMs') ? undefined : json['displayDurationMs'],
        'displayLocation': !(0, runtime_1.exists)(json, 'displayLocation') ? undefined : json['displayLocation'],
        'iconDisplayInfo': !(0, runtime_1.exists)(json, 'iconDisplayInfo') ? undefined : json['iconDisplayInfo'],
        'richText': (0, TimelineShowAlertRichText_1.TimelineShowAlertRichTextFromJSON)(json['richText']),
        'triggerDelayMs': !(0, runtime_1.exists)(json, 'triggerDelayMs') ? undefined : json['triggerDelayMs'],
        'type': (0, InstructionType_1.InstructionTypeFromJSON)(json['type']),
        'usersResults': (json['usersResults'].map(UserResults_1.UserResultsFromJSON)),
    };
}
exports.TimelineShowAlertFromJSONTyped = TimelineShowAlertFromJSONTyped;
function TimelineShowAlertToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'alertType': value.alertType,
        'colorConfig': value.colorConfig,
        'displayDurationMs': value.displayDurationMs,
        'displayLocation': value.displayLocation,
        'iconDisplayInfo': value.iconDisplayInfo,
        'richText': (0, TimelineShowAlertRichText_1.TimelineShowAlertRichTextToJSON)(value.richText),
        'triggerDelayMs': value.triggerDelayMs,
        'type': (0, InstructionType_1.InstructionTypeToJSON)(value.type),
        'usersResults': (value.usersResults.map(UserResults_1.UserResultsToJSON)),
    };
}
exports.TimelineShowAlertToJSON = TimelineShowAlertToJSON;
//# sourceMappingURL=TimelineShowAlert.js.map