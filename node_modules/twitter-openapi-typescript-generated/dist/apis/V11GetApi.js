"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V11GetApi = void 0;
var runtime = require("../runtime");
/**
 *
 */
var V11GetApi = /** @class */ (function (_super) {
    __extends(V11GetApi, _super);
    function V11GetApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get friends following list
     */
    V11GetApi.prototype.getFriendsFollowingListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.includeProfileInterstitialType === null || requestParameters.includeProfileInterstitialType === undefined) {
                            throw new runtime.RequiredError('includeProfileInterstitialType', 'Required parameter requestParameters.includeProfileInterstitialType was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeBlocking === null || requestParameters.includeBlocking === undefined) {
                            throw new runtime.RequiredError('includeBlocking', 'Required parameter requestParameters.includeBlocking was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeBlockedBy === null || requestParameters.includeBlockedBy === undefined) {
                            throw new runtime.RequiredError('includeBlockedBy', 'Required parameter requestParameters.includeBlockedBy was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeFollowedBy === null || requestParameters.includeFollowedBy === undefined) {
                            throw new runtime.RequiredError('includeFollowedBy', 'Required parameter requestParameters.includeFollowedBy was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeWantRetweets === null || requestParameters.includeWantRetweets === undefined) {
                            throw new runtime.RequiredError('includeWantRetweets', 'Required parameter requestParameters.includeWantRetweets was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeMuteEdge === null || requestParameters.includeMuteEdge === undefined) {
                            throw new runtime.RequiredError('includeMuteEdge', 'Required parameter requestParameters.includeMuteEdge was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeCanDm === null || requestParameters.includeCanDm === undefined) {
                            throw new runtime.RequiredError('includeCanDm', 'Required parameter requestParameters.includeCanDm was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeCanMediaTag === null || requestParameters.includeCanMediaTag === undefined) {
                            throw new runtime.RequiredError('includeCanMediaTag', 'Required parameter requestParameters.includeCanMediaTag was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeExtHasNftAvatar === null || requestParameters.includeExtHasNftAvatar === undefined) {
                            throw new runtime.RequiredError('includeExtHasNftAvatar', 'Required parameter requestParameters.includeExtHasNftAvatar was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeExtIsBlueVerified === null || requestParameters.includeExtIsBlueVerified === undefined) {
                            throw new runtime.RequiredError('includeExtIsBlueVerified', 'Required parameter requestParameters.includeExtIsBlueVerified was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeExtVerifiedType === null || requestParameters.includeExtVerifiedType === undefined) {
                            throw new runtime.RequiredError('includeExtVerifiedType', 'Required parameter requestParameters.includeExtVerifiedType was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.includeExtProfileImageShape === null || requestParameters.includeExtProfileImageShape === undefined) {
                            throw new runtime.RequiredError('includeExtProfileImageShape', 'Required parameter requestParameters.includeExtProfileImageShape was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.skipStatus === null || requestParameters.skipStatus === undefined) {
                            throw new runtime.RequiredError('skipStatus', 'Required parameter requestParameters.skipStatus was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.cursor === null || requestParameters.cursor === undefined) {
                            throw new runtime.RequiredError('cursor', 'Required parameter requestParameters.cursor was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.userId === null || requestParameters.userId === undefined) {
                            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.count === null || requestParameters.count === undefined) {
                            throw new runtime.RequiredError('count', 'Required parameter requestParameters.count was null or undefined when calling getFriendsFollowingList.');
                        }
                        if (requestParameters.withTotalCount === null || requestParameters.withTotalCount === undefined) {
                            throw new runtime.RequiredError('withTotalCount', 'Required parameter requestParameters.withTotalCount was null or undefined when calling getFriendsFollowingList.');
                        }
                        queryParameters = {};
                        if (requestParameters.includeProfileInterstitialType !== undefined) {
                            queryParameters['include_profile_interstitial_type'] = requestParameters.includeProfileInterstitialType;
                        }
                        if (requestParameters.includeBlocking !== undefined) {
                            queryParameters['include_blocking'] = requestParameters.includeBlocking;
                        }
                        if (requestParameters.includeBlockedBy !== undefined) {
                            queryParameters['include_blocked_by'] = requestParameters.includeBlockedBy;
                        }
                        if (requestParameters.includeFollowedBy !== undefined) {
                            queryParameters['include_followed_by'] = requestParameters.includeFollowedBy;
                        }
                        if (requestParameters.includeWantRetweets !== undefined) {
                            queryParameters['include_want_retweets'] = requestParameters.includeWantRetweets;
                        }
                        if (requestParameters.includeMuteEdge !== undefined) {
                            queryParameters['include_mute_edge'] = requestParameters.includeMuteEdge;
                        }
                        if (requestParameters.includeCanDm !== undefined) {
                            queryParameters['include_can_dm'] = requestParameters.includeCanDm;
                        }
                        if (requestParameters.includeCanMediaTag !== undefined) {
                            queryParameters['include_can_media_tag'] = requestParameters.includeCanMediaTag;
                        }
                        if (requestParameters.includeExtHasNftAvatar !== undefined) {
                            queryParameters['include_ext_has_nft_avatar'] = requestParameters.includeExtHasNftAvatar;
                        }
                        if (requestParameters.includeExtIsBlueVerified !== undefined) {
                            queryParameters['include_ext_is_blue_verified'] = requestParameters.includeExtIsBlueVerified;
                        }
                        if (requestParameters.includeExtVerifiedType !== undefined) {
                            queryParameters['include_ext_verified_type'] = requestParameters.includeExtVerifiedType;
                        }
                        if (requestParameters.includeExtProfileImageShape !== undefined) {
                            queryParameters['include_ext_profile_image_shape'] = requestParameters.includeExtProfileImageShape;
                        }
                        if (requestParameters.skipStatus !== undefined) {
                            queryParameters['skip_status'] = requestParameters.skipStatus;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        if (requestParameters.userId !== undefined) {
                            queryParameters['user_id'] = requestParameters.userId;
                        }
                        if (requestParameters.count !== undefined) {
                            queryParameters['count'] = requestParameters.count;
                        }
                        if (requestParameters.withTotalCount !== undefined) {
                            queryParameters['with_total_count'] = requestParameters.withTotalCount;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Accept"] = this.configuration.apiKey("Accept"); // Accept authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Fetch-Dest"] = this.configuration.apiKey("Sec-Fetch-Dest"); // SecFetchDest authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Pragma"] = this.configuration.apiKey("Pragma"); // Pragma authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Ch-Ua-Platform"] = this.configuration.apiKey("Sec-Ch-Ua-Platform"); // SecChUaPlatform authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Fetch-Mode"] = this.configuration.apiKey("Sec-Fetch-Mode"); // SecFetchMode authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-guest-token"] = this.configuration.apiKey("x-guest-token"); // GuestToken authentication
                        }
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("BearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2:
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Ch-Ua"] = this.configuration.apiKey("Sec-Ch-Ua"); // SecChUa authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Accept-Language"] = this.configuration.apiKey("Accept-Language"); // AcceptLanguage authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Fetch-Site"] = this.configuration.apiKey("Sec-Fetch-Site"); // SecFetchSite authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Cache-Control"] = this.configuration.apiKey("Cache-Control"); // CacheControl authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Ch-Ua-Mobile"] = this.configuration.apiKey("Sec-Ch-Ua-Mobile"); // SecChUaMobile authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Accept-Encoding"] = this.configuration.apiKey("Accept-Encoding"); // AcceptEncoding authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/1.1/friends/following/list.json",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * get friends following list
     */
    V11GetApi.prototype.getFriendsFollowingList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFriendsFollowingListRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * get search typeahead
     */
    V11GetApi.prototype.getSearchTypeaheadRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.includeExtIsBlueVerified === null || requestParameters.includeExtIsBlueVerified === undefined) {
                            throw new runtime.RequiredError('includeExtIsBlueVerified', 'Required parameter requestParameters.includeExtIsBlueVerified was null or undefined when calling getSearchTypeahead.');
                        }
                        if (requestParameters.includeExtVerifiedType === null || requestParameters.includeExtVerifiedType === undefined) {
                            throw new runtime.RequiredError('includeExtVerifiedType', 'Required parameter requestParameters.includeExtVerifiedType was null or undefined when calling getSearchTypeahead.');
                        }
                        if (requestParameters.includeExtProfileImageShape === null || requestParameters.includeExtProfileImageShape === undefined) {
                            throw new runtime.RequiredError('includeExtProfileImageShape', 'Required parameter requestParameters.includeExtProfileImageShape was null or undefined when calling getSearchTypeahead.');
                        }
                        if (requestParameters.q === null || requestParameters.q === undefined) {
                            throw new runtime.RequiredError('q', 'Required parameter requestParameters.q was null or undefined when calling getSearchTypeahead.');
                        }
                        if (requestParameters.src === null || requestParameters.src === undefined) {
                            throw new runtime.RequiredError('src', 'Required parameter requestParameters.src was null or undefined when calling getSearchTypeahead.');
                        }
                        if (requestParameters.resultType === null || requestParameters.resultType === undefined) {
                            throw new runtime.RequiredError('resultType', 'Required parameter requestParameters.resultType was null or undefined when calling getSearchTypeahead.');
                        }
                        queryParameters = {};
                        if (requestParameters.includeExtIsBlueVerified !== undefined) {
                            queryParameters['include_ext_is_blue_verified'] = requestParameters.includeExtIsBlueVerified;
                        }
                        if (requestParameters.includeExtVerifiedType !== undefined) {
                            queryParameters['include_ext_verified_type'] = requestParameters.includeExtVerifiedType;
                        }
                        if (requestParameters.includeExtProfileImageShape !== undefined) {
                            queryParameters['include_ext_profile_image_shape'] = requestParameters.includeExtProfileImageShape;
                        }
                        if (requestParameters.q !== undefined) {
                            queryParameters['q'] = requestParameters.q;
                        }
                        if (requestParameters.src !== undefined) {
                            queryParameters['src'] = requestParameters.src;
                        }
                        if (requestParameters.resultType !== undefined) {
                            queryParameters['result_type'] = requestParameters.resultType;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Accept"] = this.configuration.apiKey("Accept"); // Accept authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Fetch-Dest"] = this.configuration.apiKey("Sec-Fetch-Dest"); // SecFetchDest authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Pragma"] = this.configuration.apiKey("Pragma"); // Pragma authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Ch-Ua-Platform"] = this.configuration.apiKey("Sec-Ch-Ua-Platform"); // SecChUaPlatform authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Fetch-Mode"] = this.configuration.apiKey("Sec-Fetch-Mode"); // SecFetchMode authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-guest-token"] = this.configuration.apiKey("x-guest-token"); // GuestToken authentication
                        }
                        if (!(this.configuration && this.configuration.accessToken)) return [3 /*break*/, 2];
                        token = this.configuration.accessToken;
                        return [4 /*yield*/, token("BearerAuth", [])];
                    case 1:
                        tokenString = _a.sent();
                        if (tokenString) {
                            headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                        }
                        _a.label = 2;
                    case 2:
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Ch-Ua"] = this.configuration.apiKey("Sec-Ch-Ua"); // SecChUa authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Accept-Language"] = this.configuration.apiKey("Accept-Language"); // AcceptLanguage authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Fetch-Site"] = this.configuration.apiKey("Sec-Fetch-Site"); // SecFetchSite authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Cache-Control"] = this.configuration.apiKey("Cache-Control"); // CacheControl authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Sec-Ch-Ua-Mobile"] = this.configuration.apiKey("Sec-Ch-Ua-Mobile"); // SecChUaMobile authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Accept-Encoding"] = this.configuration.apiKey("Accept-Encoding"); // AcceptEncoding authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/1.1/search/typeahead.json",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * get search typeahead
     */
    V11GetApi.prototype.getSearchTypeahead = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSearchTypeaheadRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return V11GetApi;
}(runtime.BaseAPI));
exports.V11GetApi = V11GetApi;
//# sourceMappingURL=V11GetApi.js.map