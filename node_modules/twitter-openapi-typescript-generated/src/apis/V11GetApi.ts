/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetFriendsFollowingListRequest {
    includeProfileInterstitialType: number;
    includeBlocking: number;
    includeBlockedBy: number;
    includeFollowedBy: number;
    includeWantRetweets: number;
    includeMuteEdge: number;
    includeCanDm: number;
    includeCanMediaTag: number;
    includeExtHasNftAvatar: number;
    includeExtIsBlueVerified: number;
    includeExtVerifiedType: number;
    includeExtProfileImageShape: number;
    skipStatus: number;
    cursor: number;
    userId: string;
    count: number;
    withTotalCount: boolean;
}

export interface GetSearchTypeaheadRequest {
    includeExtIsBlueVerified: number;
    includeExtVerifiedType: number;
    includeExtProfileImageShape: number;
    q: string;
    src: string;
    resultType: string;
}

/**
 * 
 */
export class V11GetApi extends runtime.BaseAPI {

    /**
     * get friends following list
     */
    async getFriendsFollowingListRaw(requestParameters: GetFriendsFollowingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.includeProfileInterstitialType === null || requestParameters.includeProfileInterstitialType === undefined) {
            throw new runtime.RequiredError('includeProfileInterstitialType','Required parameter requestParameters.includeProfileInterstitialType was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeBlocking === null || requestParameters.includeBlocking === undefined) {
            throw new runtime.RequiredError('includeBlocking','Required parameter requestParameters.includeBlocking was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeBlockedBy === null || requestParameters.includeBlockedBy === undefined) {
            throw new runtime.RequiredError('includeBlockedBy','Required parameter requestParameters.includeBlockedBy was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeFollowedBy === null || requestParameters.includeFollowedBy === undefined) {
            throw new runtime.RequiredError('includeFollowedBy','Required parameter requestParameters.includeFollowedBy was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeWantRetweets === null || requestParameters.includeWantRetweets === undefined) {
            throw new runtime.RequiredError('includeWantRetweets','Required parameter requestParameters.includeWantRetweets was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeMuteEdge === null || requestParameters.includeMuteEdge === undefined) {
            throw new runtime.RequiredError('includeMuteEdge','Required parameter requestParameters.includeMuteEdge was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeCanDm === null || requestParameters.includeCanDm === undefined) {
            throw new runtime.RequiredError('includeCanDm','Required parameter requestParameters.includeCanDm was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeCanMediaTag === null || requestParameters.includeCanMediaTag === undefined) {
            throw new runtime.RequiredError('includeCanMediaTag','Required parameter requestParameters.includeCanMediaTag was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeExtHasNftAvatar === null || requestParameters.includeExtHasNftAvatar === undefined) {
            throw new runtime.RequiredError('includeExtHasNftAvatar','Required parameter requestParameters.includeExtHasNftAvatar was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeExtIsBlueVerified === null || requestParameters.includeExtIsBlueVerified === undefined) {
            throw new runtime.RequiredError('includeExtIsBlueVerified','Required parameter requestParameters.includeExtIsBlueVerified was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeExtVerifiedType === null || requestParameters.includeExtVerifiedType === undefined) {
            throw new runtime.RequiredError('includeExtVerifiedType','Required parameter requestParameters.includeExtVerifiedType was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.includeExtProfileImageShape === null || requestParameters.includeExtProfileImageShape === undefined) {
            throw new runtime.RequiredError('includeExtProfileImageShape','Required parameter requestParameters.includeExtProfileImageShape was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.skipStatus === null || requestParameters.skipStatus === undefined) {
            throw new runtime.RequiredError('skipStatus','Required parameter requestParameters.skipStatus was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.cursor === null || requestParameters.cursor === undefined) {
            throw new runtime.RequiredError('cursor','Required parameter requestParameters.cursor was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.count === null || requestParameters.count === undefined) {
            throw new runtime.RequiredError('count','Required parameter requestParameters.count was null or undefined when calling getFriendsFollowingList.');
        }

        if (requestParameters.withTotalCount === null || requestParameters.withTotalCount === undefined) {
            throw new runtime.RequiredError('withTotalCount','Required parameter requestParameters.withTotalCount was null or undefined when calling getFriendsFollowingList.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeProfileInterstitialType !== undefined) {
            queryParameters['include_profile_interstitial_type'] = requestParameters.includeProfileInterstitialType;
        }

        if (requestParameters.includeBlocking !== undefined) {
            queryParameters['include_blocking'] = requestParameters.includeBlocking;
        }

        if (requestParameters.includeBlockedBy !== undefined) {
            queryParameters['include_blocked_by'] = requestParameters.includeBlockedBy;
        }

        if (requestParameters.includeFollowedBy !== undefined) {
            queryParameters['include_followed_by'] = requestParameters.includeFollowedBy;
        }

        if (requestParameters.includeWantRetweets !== undefined) {
            queryParameters['include_want_retweets'] = requestParameters.includeWantRetweets;
        }

        if (requestParameters.includeMuteEdge !== undefined) {
            queryParameters['include_mute_edge'] = requestParameters.includeMuteEdge;
        }

        if (requestParameters.includeCanDm !== undefined) {
            queryParameters['include_can_dm'] = requestParameters.includeCanDm;
        }

        if (requestParameters.includeCanMediaTag !== undefined) {
            queryParameters['include_can_media_tag'] = requestParameters.includeCanMediaTag;
        }

        if (requestParameters.includeExtHasNftAvatar !== undefined) {
            queryParameters['include_ext_has_nft_avatar'] = requestParameters.includeExtHasNftAvatar;
        }

        if (requestParameters.includeExtIsBlueVerified !== undefined) {
            queryParameters['include_ext_is_blue_verified'] = requestParameters.includeExtIsBlueVerified;
        }

        if (requestParameters.includeExtVerifiedType !== undefined) {
            queryParameters['include_ext_verified_type'] = requestParameters.includeExtVerifiedType;
        }

        if (requestParameters.includeExtProfileImageShape !== undefined) {
            queryParameters['include_ext_profile_image_shape'] = requestParameters.includeExtProfileImageShape;
        }

        if (requestParameters.skipStatus !== undefined) {
            queryParameters['skip_status'] = requestParameters.skipStatus;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.withTotalCount !== undefined) {
            queryParameters['with_total_count'] = requestParameters.withTotalCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept"] = this.configuration.apiKey("Accept"); // Accept authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Dest"] = this.configuration.apiKey("Sec-Fetch-Dest"); // SecFetchDest authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Pragma"] = this.configuration.apiKey("Pragma"); // Pragma authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua-Platform"] = this.configuration.apiKey("Sec-Ch-Ua-Platform"); // SecChUaPlatform authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Mode"] = this.configuration.apiKey("Sec-Fetch-Mode"); // SecFetchMode authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-guest-token"] = this.configuration.apiKey("x-guest-token"); // GuestToken authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua"] = this.configuration.apiKey("Sec-Ch-Ua"); // SecChUa authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept-Language"] = this.configuration.apiKey("Accept-Language"); // AcceptLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Site"] = this.configuration.apiKey("Sec-Fetch-Site"); // SecFetchSite authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Cache-Control"] = this.configuration.apiKey("Cache-Control"); // CacheControl authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua-Mobile"] = this.configuration.apiKey("Sec-Ch-Ua-Mobile"); // SecChUaMobile authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept-Encoding"] = this.configuration.apiKey("Accept-Encoding"); // AcceptEncoding authentication
        }

        const response = await this.request({
            path: `/1.1/friends/following/list.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get friends following list
     */
    async getFriendsFollowingList(requestParameters: GetFriendsFollowingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getFriendsFollowingListRaw(requestParameters, initOverrides);
    }

    /**
     * get search typeahead
     */
    async getSearchTypeaheadRaw(requestParameters: GetSearchTypeaheadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.includeExtIsBlueVerified === null || requestParameters.includeExtIsBlueVerified === undefined) {
            throw new runtime.RequiredError('includeExtIsBlueVerified','Required parameter requestParameters.includeExtIsBlueVerified was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.includeExtVerifiedType === null || requestParameters.includeExtVerifiedType === undefined) {
            throw new runtime.RequiredError('includeExtVerifiedType','Required parameter requestParameters.includeExtVerifiedType was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.includeExtProfileImageShape === null || requestParameters.includeExtProfileImageShape === undefined) {
            throw new runtime.RequiredError('includeExtProfileImageShape','Required parameter requestParameters.includeExtProfileImageShape was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.src === null || requestParameters.src === undefined) {
            throw new runtime.RequiredError('src','Required parameter requestParameters.src was null or undefined when calling getSearchTypeahead.');
        }

        if (requestParameters.resultType === null || requestParameters.resultType === undefined) {
            throw new runtime.RequiredError('resultType','Required parameter requestParameters.resultType was null or undefined when calling getSearchTypeahead.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeExtIsBlueVerified !== undefined) {
            queryParameters['include_ext_is_blue_verified'] = requestParameters.includeExtIsBlueVerified;
        }

        if (requestParameters.includeExtVerifiedType !== undefined) {
            queryParameters['include_ext_verified_type'] = requestParameters.includeExtVerifiedType;
        }

        if (requestParameters.includeExtProfileImageShape !== undefined) {
            queryParameters['include_ext_profile_image_shape'] = requestParameters.includeExtProfileImageShape;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.src !== undefined) {
            queryParameters['src'] = requestParameters.src;
        }

        if (requestParameters.resultType !== undefined) {
            queryParameters['result_type'] = requestParameters.resultType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-client-language"] = this.configuration.apiKey("x-twitter-client-language"); // ClientLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept"] = this.configuration.apiKey("Accept"); // Accept authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Dest"] = this.configuration.apiKey("Sec-Fetch-Dest"); // SecFetchDest authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Pragma"] = this.configuration.apiKey("Pragma"); // Pragma authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua-Platform"] = this.configuration.apiKey("Sec-Ch-Ua-Platform"); // SecChUaPlatform authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Mode"] = this.configuration.apiKey("Sec-Fetch-Mode"); // SecFetchMode authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = this.configuration.apiKey("x-csrf-token"); // CsrfToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-guest-token"] = this.configuration.apiKey("x-guest-token"); // GuestToken authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua"] = this.configuration.apiKey("Sec-Ch-Ua"); // SecChUa authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-active-user"] = this.configuration.apiKey("x-twitter-active-user"); // ActiveUser authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["user-agent"] = this.configuration.apiKey("user-agent"); // UserAgent authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept-Language"] = this.configuration.apiKey("Accept-Language"); // AcceptLanguage authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Fetch-Site"] = this.configuration.apiKey("Sec-Fetch-Site"); // SecFetchSite authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-twitter-auth-type"] = this.configuration.apiKey("x-twitter-auth-type"); // AuthType authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Cache-Control"] = this.configuration.apiKey("Cache-Control"); // CacheControl authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Sec-Ch-Ua-Mobile"] = this.configuration.apiKey("Sec-Ch-Ua-Mobile"); // SecChUaMobile authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Accept-Encoding"] = this.configuration.apiKey("Accept-Encoding"); // AcceptEncoding authentication
        }

        const response = await this.request({
            path: `/1.1/search/typeahead.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get search typeahead
     */
    async getSearchTypeahead(requestParameters: GetSearchTypeaheadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getSearchTypeaheadRaw(requestParameters, initOverrides);
    }

}
