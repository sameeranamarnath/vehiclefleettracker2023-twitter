/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentItemType } from './ContentItemType';
import {
    ContentItemTypeFromJSON,
    ContentItemTypeFromJSONTyped,
    ContentItemTypeToJSON,
} from './ContentItemType';
import type { SocialContext } from './SocialContext';
import {
    SocialContextFromJSON,
    SocialContextFromJSONTyped,
    SocialContextToJSON,
} from './SocialContext';
import type { TypeName } from './TypeName';
import {
    TypeNameFromJSON,
    TypeNameFromJSONTyped,
    TypeNameToJSON,
} from './TypeName';
import type { UserResults } from './UserResults';
import {
    UserResultsFromJSON,
    UserResultsFromJSONTyped,
    UserResultsToJSON,
} from './UserResults';

/**
 * 
 * @export
 * @interface TimelineUser
 */
export interface TimelineUser {
    /**
     * 
     * @type {SocialContext}
     * @memberof TimelineUser
     */
    socialContext?: SocialContext;
    /**
     * 
     * @type {TypeName}
     * @memberof TimelineUser
     */
    typename: TypeName;
    /**
     * 
     * @type {ContentItemType}
     * @memberof TimelineUser
     */
    itemType: ContentItemType;
    /**
     * 
     * @type {string}
     * @memberof TimelineUser
     */
    userDisplayType: TimelineUserUserDisplayTypeEnum;
    /**
     * 
     * @type {UserResults}
     * @memberof TimelineUser
     */
    userResults: UserResults;
}


/**
 * @export
 */
export const TimelineUserUserDisplayTypeEnum = {
    User: 'User',
    UserDetailed: 'UserDetailed',
    SubscribableUser: 'SubscribableUser'
} as const;
export type TimelineUserUserDisplayTypeEnum = typeof TimelineUserUserDisplayTypeEnum[keyof typeof TimelineUserUserDisplayTypeEnum];


/**
 * Check if a given object implements the TimelineUser interface.
 */
export function instanceOfTimelineUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "typename" in value;
    isInstance = isInstance && "itemType" in value;
    isInstance = isInstance && "userDisplayType" in value;
    isInstance = isInstance && "userResults" in value;

    return isInstance;
}

export function TimelineUserFromJSON(json: any): TimelineUser {
    return TimelineUserFromJSONTyped(json, false);
}

export function TimelineUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimelineUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'socialContext': !exists(json, 'SocialContext') ? undefined : SocialContextFromJSON(json['SocialContext']),
        'typename': TypeNameFromJSON(json['__typename']),
        'itemType': ContentItemTypeFromJSON(json['itemType']),
        'userDisplayType': json['userDisplayType'],
        'userResults': UserResultsFromJSON(json['user_results']),
    };
}

export function TimelineUserToJSON(value?: TimelineUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'SocialContext': SocialContextToJSON(value.socialContext),
        '__typename': TypeNameToJSON(value.typename),
        'itemType': ContentItemTypeToJSON(value.itemType),
        'userDisplayType': value.userDisplayType,
        'user_results': UserResultsToJSON(value.userResults),
    };
}

