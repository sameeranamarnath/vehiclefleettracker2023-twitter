/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdditionalMediaInfo } from './AdditionalMediaInfo';
import {
    AdditionalMediaInfoFromJSON,
    AdditionalMediaInfoFromJSONTyped,
    AdditionalMediaInfoToJSON,
} from './AdditionalMediaInfo';
import type { ExtMediaAvailability } from './ExtMediaAvailability';
import {
    ExtMediaAvailabilityFromJSON,
    ExtMediaAvailabilityFromJSONTyped,
    ExtMediaAvailabilityToJSON,
} from './ExtMediaAvailability';
import type { MediaOriginalInfo } from './MediaOriginalInfo';
import {
    MediaOriginalInfoFromJSON,
    MediaOriginalInfoFromJSONTyped,
    MediaOriginalInfoToJSON,
} from './MediaOriginalInfo';
import type { MediaSizes } from './MediaSizes';
import {
    MediaSizesFromJSON,
    MediaSizesFromJSONTyped,
    MediaSizesToJSON,
} from './MediaSizes';
import type { MediaStats } from './MediaStats';
import {
    MediaStatsFromJSON,
    MediaStatsFromJSONTyped,
    MediaStatsToJSON,
} from './MediaStats';
import type { MediaVideoInfo } from './MediaVideoInfo';
import {
    MediaVideoInfoFromJSON,
    MediaVideoInfoFromJSONTyped,
    MediaVideoInfoToJSON,
} from './MediaVideoInfo';

/**
 * 
 * @export
 * @interface MediaExtended
 */
export interface MediaExtended {
    /**
     * 
     * @type {AdditionalMediaInfo}
     * @memberof MediaExtended
     */
    additionalMediaInfo?: AdditionalMediaInfo;
    /**
     * 
     * @type {string}
     * @memberof MediaExtended
     */
    displayUrl: string;
    /**
     * 
     * @type {string}
     * @memberof MediaExtended
     */
    expandedUrl: string;
    /**
     * 
     * @type {ExtMediaAvailability}
     * @memberof MediaExtended
     */
    extMediaAvailability?: ExtMediaAvailability;
    /**
     * 
     * @type {object}
     * @memberof MediaExtended
     */
    features?: object;
    /**
     * 
     * @type {string}
     * @memberof MediaExtended
     */
    idStr: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof MediaExtended
     */
    indices: Array<number>;
    /**
     * 
     * @type {MediaStats}
     * @memberof MediaExtended
     */
    mediaStats?: MediaStats;
    /**
     * 
     * @type {string}
     * @memberof MediaExtended
     */
    mediaKey: string;
    /**
     * 
     * @type {string}
     * @memberof MediaExtended
     */
    mediaUrlHttps: string;
    /**
     * 
     * @type {MediaOriginalInfo}
     * @memberof MediaExtended
     */
    originalInfo: MediaOriginalInfo;
    /**
     * 
     * @type {MediaSizes}
     * @memberof MediaExtended
     */
    sizes: MediaSizes;
    /**
     * 
     * @type {string}
     * @memberof MediaExtended
     */
    type: MediaExtendedTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MediaExtended
     */
    url: string;
    /**
     * 
     * @type {MediaVideoInfo}
     * @memberof MediaExtended
     */
    videoInfo?: MediaVideoInfo;
}


/**
 * @export
 */
export const MediaExtendedTypeEnum = {
    Photo: 'photo',
    Video: 'video',
    AnimatedGif: 'animated_gif'
} as const;
export type MediaExtendedTypeEnum = typeof MediaExtendedTypeEnum[keyof typeof MediaExtendedTypeEnum];


/**
 * Check if a given object implements the MediaExtended interface.
 */
export function instanceOfMediaExtended(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "displayUrl" in value;
    isInstance = isInstance && "expandedUrl" in value;
    isInstance = isInstance && "idStr" in value;
    isInstance = isInstance && "indices" in value;
    isInstance = isInstance && "mediaKey" in value;
    isInstance = isInstance && "mediaUrlHttps" in value;
    isInstance = isInstance && "originalInfo" in value;
    isInstance = isInstance && "sizes" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function MediaExtendedFromJSON(json: any): MediaExtended {
    return MediaExtendedFromJSONTyped(json, false);
}

export function MediaExtendedFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaExtended {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'additionalMediaInfo': !exists(json, 'additional_media_info') ? undefined : AdditionalMediaInfoFromJSON(json['additional_media_info']),
        'displayUrl': json['display_url'],
        'expandedUrl': json['expanded_url'],
        'extMediaAvailability': !exists(json, 'ext_media_availability') ? undefined : ExtMediaAvailabilityFromJSON(json['ext_media_availability']),
        'features': !exists(json, 'features') ? undefined : json['features'],
        'idStr': json['id_str'],
        'indices': json['indices'],
        'mediaStats': !exists(json, 'mediaStats') ? undefined : MediaStatsFromJSON(json['mediaStats']),
        'mediaKey': json['media_key'],
        'mediaUrlHttps': json['media_url_https'],
        'originalInfo': MediaOriginalInfoFromJSON(json['original_info']),
        'sizes': MediaSizesFromJSON(json['sizes']),
        'type': json['type'],
        'url': json['url'],
        'videoInfo': !exists(json, 'video_info') ? undefined : MediaVideoInfoFromJSON(json['video_info']),
    };
}

export function MediaExtendedToJSON(value?: MediaExtended | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'additional_media_info': AdditionalMediaInfoToJSON(value.additionalMediaInfo),
        'display_url': value.displayUrl,
        'expanded_url': value.expandedUrl,
        'ext_media_availability': ExtMediaAvailabilityToJSON(value.extMediaAvailability),
        'features': value.features,
        'id_str': value.idStr,
        'indices': value.indices,
        'mediaStats': MediaStatsToJSON(value.mediaStats),
        'media_key': value.mediaKey,
        'media_url_https': value.mediaUrlHttps,
        'original_info': MediaOriginalInfoToJSON(value.originalInfo),
        'sizes': MediaSizesToJSON(value.sizes),
        'type': value.type,
        'url': value.url,
        'video_info': MediaVideoInfoToJSON(value.videoInfo),
    };
}

