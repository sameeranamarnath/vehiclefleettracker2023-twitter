/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MediaOriginalInfo } from './MediaOriginalInfo';
import {
    MediaOriginalInfoFromJSON,
    MediaOriginalInfoFromJSONTyped,
    MediaOriginalInfoToJSON,
} from './MediaOriginalInfo';
import type { MediaSizes } from './MediaSizes';
import {
    MediaSizesFromJSON,
    MediaSizesFromJSONTyped,
    MediaSizesToJSON,
} from './MediaSizes';

/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    displayUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    expandedUrl: string;
    /**
     * 
     * @type {object}
     * @memberof Media
     */
    features?: object;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    idStr: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Media
     */
    indices: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    mediaUrlHttps: string;
    /**
     * 
     * @type {MediaOriginalInfo}
     * @memberof Media
     */
    originalInfo: MediaOriginalInfo;
    /**
     * 
     * @type {MediaSizes}
     * @memberof Media
     */
    sizes: MediaSizes;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    type: MediaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    url: string;
}


/**
 * @export
 */
export const MediaTypeEnum = {
    Photo: 'photo',
    Video: 'video',
    AnimatedGif: 'animated_gif'
} as const;
export type MediaTypeEnum = typeof MediaTypeEnum[keyof typeof MediaTypeEnum];


/**
 * Check if a given object implements the Media interface.
 */
export function instanceOfMedia(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "displayUrl" in value;
    isInstance = isInstance && "expandedUrl" in value;
    isInstance = isInstance && "idStr" in value;
    isInstance = isInstance && "indices" in value;
    isInstance = isInstance && "mediaUrlHttps" in value;
    isInstance = isInstance && "originalInfo" in value;
    isInstance = isInstance && "sizes" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function MediaFromJSON(json: any): Media {
    return MediaFromJSONTyped(json, false);
}

export function MediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Media {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayUrl': json['display_url'],
        'expandedUrl': json['expanded_url'],
        'features': !exists(json, 'features') ? undefined : json['features'],
        'idStr': json['id_str'],
        'indices': json['indices'],
        'mediaUrlHttps': json['media_url_https'],
        'originalInfo': MediaOriginalInfoFromJSON(json['original_info']),
        'sizes': MediaSizesFromJSON(json['sizes']),
        'type': json['type'],
        'url': json['url'],
    };
}

export function MediaToJSON(value?: Media | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'display_url': value.displayUrl,
        'expanded_url': value.expandedUrl,
        'features': value.features,
        'id_str': value.idStr,
        'indices': value.indices,
        'media_url_https': value.mediaUrlHttps,
        'original_info': MediaOriginalInfoToJSON(value.originalInfo),
        'sizes': MediaSizesToJSON(value.sizes),
        'type': value.type,
        'url': value.url,
    };
}

