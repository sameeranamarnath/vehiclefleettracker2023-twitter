/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentItemType } from './ContentItemType';
import {
    ContentItemTypeFromJSON,
    ContentItemTypeFromJSONTyped,
    ContentItemTypeToJSON,
} from './ContentItemType';
import type { ItemResult } from './ItemResult';
import {
    ItemResultFromJSON,
    ItemResultFromJSONTyped,
    ItemResultToJSON,
} from './ItemResult';
import type { SocialContext } from './SocialContext';
import {
    SocialContextFromJSON,
    SocialContextFromJSONTyped,
    SocialContextToJSON,
} from './SocialContext';
import type { TypeName } from './TypeName';
import {
    TypeNameFromJSON,
    TypeNameFromJSONTyped,
    TypeNameToJSON,
} from './TypeName';

/**
 * 
 * @export
 * @interface TimelineTweet
 */
export interface TimelineTweet {
    /**
     * 
     * @type {SocialContext}
     * @memberof TimelineTweet
     */
    socialContext?: SocialContext;
    /**
     * 
     * @type {TypeName}
     * @memberof TimelineTweet
     */
    typename: TypeName;
    /**
     * 
     * @type {ContentItemType}
     * @memberof TimelineTweet
     */
    itemType: ContentItemType;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof TimelineTweet
     */
    promotedMetadata?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof TimelineTweet
     */
    tweetDisplayType: string;
    /**
     * 
     * @type {ItemResult}
     * @memberof TimelineTweet
     */
    tweetResults: ItemResult;
}

/**
 * Check if a given object implements the TimelineTweet interface.
 */
export function instanceOfTimelineTweet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "typename" in value;
    isInstance = isInstance && "itemType" in value;
    isInstance = isInstance && "tweetDisplayType" in value;
    isInstance = isInstance && "tweetResults" in value;

    return isInstance;
}

export function TimelineTweetFromJSON(json: any): TimelineTweet {
    return TimelineTweetFromJSONTyped(json, false);
}

export function TimelineTweetFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimelineTweet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'socialContext': !exists(json, 'SocialContext') ? undefined : SocialContextFromJSON(json['SocialContext']),
        'typename': TypeNameFromJSON(json['__typename']),
        'itemType': ContentItemTypeFromJSON(json['itemType']),
        'promotedMetadata': !exists(json, 'promotedMetadata') ? undefined : json['promotedMetadata'],
        'tweetDisplayType': json['tweetDisplayType'],
        'tweetResults': ItemResultFromJSON(json['tweet_results']),
    };
}

export function TimelineTweetToJSON(value?: TimelineTweet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'SocialContext': SocialContextToJSON(value.socialContext),
        '__typename': TypeNameToJSON(value.typename),
        'itemType': ContentItemTypeToJSON(value.itemType),
        'promotedMetadata': value.promotedMetadata,
        'tweetDisplayType': value.tweetDisplayType,
        'tweet_results': ItemResultToJSON(value.tweetResults),
    };
}

