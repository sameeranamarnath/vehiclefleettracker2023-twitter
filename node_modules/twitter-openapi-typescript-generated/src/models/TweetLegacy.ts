/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Entities } from './Entities';
import {
    EntitiesFromJSON,
    EntitiesFromJSONTyped,
    EntitiesToJSON,
} from './Entities';
import type { ExtendedEntities } from './ExtendedEntities';
import {
    ExtendedEntitiesFromJSON,
    ExtendedEntitiesFromJSONTyped,
    ExtendedEntitiesToJSON,
} from './ExtendedEntities';
import type { ItemResult } from './ItemResult';
import {
    ItemResultFromJSON,
    ItemResultFromJSONTyped,
    ItemResultToJSON,
} from './ItemResult';
import type { SelfThread } from './SelfThread';
import {
    SelfThreadFromJSON,
    SelfThreadFromJSONTyped,
    SelfThreadToJSON,
} from './SelfThread';

/**
 * 
 * @export
 * @interface TweetLegacy
 */
export interface TweetLegacy {
    /**
     * 
     * @type {number}
     * @memberof TweetLegacy
     */
    bookmarkCount: number;
    /**
     * 
     * @type {boolean}
     * @memberof TweetLegacy
     */
    bookmarked: boolean;
    /**
     * 
     * @type {string}
     * @memberof TweetLegacy
     */
    conversationIdStr: string;
    /**
     * 
     * @type {string}
     * @memberof TweetLegacy
     */
    createdAt: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof TweetLegacy
     */
    displayTextRange: Array<number>;
    /**
     * 
     * @type {Entities}
     * @memberof TweetLegacy
     */
    entities: Entities;
    /**
     * 
     * @type {ExtendedEntities}
     * @memberof TweetLegacy
     */
    extendedEntities?: ExtendedEntities;
    /**
     * 
     * @type {number}
     * @memberof TweetLegacy
     */
    favoriteCount: number;
    /**
     * 
     * @type {boolean}
     * @memberof TweetLegacy
     */
    favorited: boolean;
    /**
     * 
     * @type {string}
     * @memberof TweetLegacy
     */
    fullText: string;
    /**
     * 
     * @type {string}
     * @memberof TweetLegacy
     */
    idStr: string;
    /**
     * 
     * @type {boolean}
     * @memberof TweetLegacy
     */
    isQuoteStatus: boolean;
    /**
     * 
     * @type {string}
     * @memberof TweetLegacy
     */
    lang: string;
    /**
     * 
     * @type {boolean}
     * @memberof TweetLegacy
     */
    possiblySensitive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TweetLegacy
     */
    possiblySensitiveEditable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TweetLegacy
     */
    quoteCount: number;
    /**
     * 
     * @type {number}
     * @memberof TweetLegacy
     */
    replyCount: number;
    /**
     * 
     * @type {number}
     * @memberof TweetLegacy
     */
    retweetCount: number;
    /**
     * 
     * @type {boolean}
     * @memberof TweetLegacy
     */
    retweeted: boolean;
    /**
     * 
     * @type {ItemResult}
     * @memberof TweetLegacy
     */
    retweetedStatusResult?: ItemResult;
    /**
     * 
     * @type {SelfThread}
     * @memberof TweetLegacy
     */
    selfThread?: SelfThread;
    /**
     * 
     * @type {string}
     * @memberof TweetLegacy
     */
    userIdStr: string;
}

/**
 * Check if a given object implements the TweetLegacy interface.
 */
export function instanceOfTweetLegacy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bookmarkCount" in value;
    isInstance = isInstance && "bookmarked" in value;
    isInstance = isInstance && "conversationIdStr" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "displayTextRange" in value;
    isInstance = isInstance && "entities" in value;
    isInstance = isInstance && "favoriteCount" in value;
    isInstance = isInstance && "favorited" in value;
    isInstance = isInstance && "fullText" in value;
    isInstance = isInstance && "idStr" in value;
    isInstance = isInstance && "isQuoteStatus" in value;
    isInstance = isInstance && "lang" in value;
    isInstance = isInstance && "quoteCount" in value;
    isInstance = isInstance && "replyCount" in value;
    isInstance = isInstance && "retweetCount" in value;
    isInstance = isInstance && "retweeted" in value;
    isInstance = isInstance && "userIdStr" in value;

    return isInstance;
}

export function TweetLegacyFromJSON(json: any): TweetLegacy {
    return TweetLegacyFromJSONTyped(json, false);
}

export function TweetLegacyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TweetLegacy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookmarkCount': json['bookmark_count'],
        'bookmarked': json['bookmarked'],
        'conversationIdStr': json['conversation_id_str'],
        'createdAt': json['created_at'],
        'displayTextRange': json['display_text_range'],
        'entities': EntitiesFromJSON(json['entities']),
        'extendedEntities': !exists(json, 'extended_entities') ? undefined : ExtendedEntitiesFromJSON(json['extended_entities']),
        'favoriteCount': json['favorite_count'],
        'favorited': json['favorited'],
        'fullText': json['full_text'],
        'idStr': json['id_str'],
        'isQuoteStatus': json['is_quote_status'],
        'lang': json['lang'],
        'possiblySensitive': !exists(json, 'possibly_sensitive') ? undefined : json['possibly_sensitive'],
        'possiblySensitiveEditable': !exists(json, 'possibly_sensitive_editable') ? undefined : json['possibly_sensitive_editable'],
        'quoteCount': json['quote_count'],
        'replyCount': json['reply_count'],
        'retweetCount': json['retweet_count'],
        'retweeted': json['retweeted'],
        'retweetedStatusResult': !exists(json, 'retweeted_status_result') ? undefined : ItemResultFromJSON(json['retweeted_status_result']),
        'selfThread': !exists(json, 'self_thread') ? undefined : SelfThreadFromJSON(json['self_thread']),
        'userIdStr': json['user_id_str'],
    };
}

export function TweetLegacyToJSON(value?: TweetLegacy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookmark_count': value.bookmarkCount,
        'bookmarked': value.bookmarked,
        'conversation_id_str': value.conversationIdStr,
        'created_at': value.createdAt,
        'display_text_range': value.displayTextRange,
        'entities': EntitiesToJSON(value.entities),
        'extended_entities': ExtendedEntitiesToJSON(value.extendedEntities),
        'favorite_count': value.favoriteCount,
        'favorited': value.favorited,
        'full_text': value.fullText,
        'id_str': value.idStr,
        'is_quote_status': value.isQuoteStatus,
        'lang': value.lang,
        'possibly_sensitive': value.possiblySensitive,
        'possibly_sensitive_editable': value.possiblySensitiveEditable,
        'quote_count': value.quoteCount,
        'reply_count': value.replyCount,
        'retweet_count': value.retweetCount,
        'retweeted': value.retweeted,
        'retweeted_status_result': ItemResultToJSON(value.retweetedStatusResult),
        'self_thread': SelfThreadToJSON(value.selfThread),
        'user_id_str': value.userIdStr,
    };
}

