/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MediaOriginalInfoFocusRect } from './MediaOriginalInfoFocusRect';
import {
    MediaOriginalInfoFocusRectFromJSON,
    MediaOriginalInfoFocusRectFromJSONTyped,
    MediaOriginalInfoFocusRectToJSON,
} from './MediaOriginalInfoFocusRect';

/**
 * 
 * @export
 * @interface MediaOriginalInfo
 */
export interface MediaOriginalInfo {
    /**
     * 
     * @type {Array<MediaOriginalInfoFocusRect>}
     * @memberof MediaOriginalInfo
     */
    focusRects?: Array<MediaOriginalInfoFocusRect>;
    /**
     * 
     * @type {number}
     * @memberof MediaOriginalInfo
     */
    height: number;
    /**
     * 
     * @type {number}
     * @memberof MediaOriginalInfo
     */
    width: number;
}

/**
 * Check if a given object implements the MediaOriginalInfo interface.
 */
export function instanceOfMediaOriginalInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "height" in value;
    isInstance = isInstance && "width" in value;

    return isInstance;
}

export function MediaOriginalInfoFromJSON(json: any): MediaOriginalInfo {
    return MediaOriginalInfoFromJSONTyped(json, false);
}

export function MediaOriginalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaOriginalInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'focusRects': !exists(json, 'focus_rects') ? undefined : ((json['focus_rects'] as Array<any>).map(MediaOriginalInfoFocusRectFromJSON)),
        'height': json['height'],
        'width': json['width'],
    };
}

export function MediaOriginalInfoToJSON(value?: MediaOriginalInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'focus_rects': value.focusRects === undefined ? undefined : ((value.focusRects as Array<any>).map(MediaOriginalInfoFocusRectToJSON)),
        'height': value.height,
        'width': value.width,
    };
}

