/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Tweet } from './Tweet';
import {
    instanceOfTweet,
    TweetFromJSON,
    TweetFromJSONTyped,
    TweetToJSON,
} from './Tweet';
import type { TweetTombstone } from './TweetTombstone';
import {
    instanceOfTweetTombstone,
    TweetTombstoneFromJSON,
    TweetTombstoneFromJSONTyped,
    TweetTombstoneToJSON,
} from './TweetTombstone';
import type { TweetWithVisibilityResults } from './TweetWithVisibilityResults';
import {
    instanceOfTweetWithVisibilityResults,
    TweetWithVisibilityResultsFromJSON,
    TweetWithVisibilityResultsFromJSONTyped,
    TweetWithVisibilityResultsToJSON,
} from './TweetWithVisibilityResults';

/**
 * @type TweetUnion
 * 
 * @export
 */
export type TweetUnion = { typename: 'Tweet' } & Tweet | { typename: 'TweetTombstone' } & TweetTombstone | { typename: 'TweetWithVisibilityResults' } & TweetWithVisibilityResults;

export function TweetUnionFromJSON(json: any): TweetUnion {
    return TweetUnionFromJSONTyped(json, false);
}

export function TweetUnionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TweetUnion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['__typename']) {
        case 'Tweet':
            return {...TweetFromJSONTyped(json, true), typename: 'Tweet'};
        case 'TweetTombstone':
            return {...TweetTombstoneFromJSONTyped(json, true), typename: 'TweetTombstone'};
        case 'TweetWithVisibilityResults':
            return {...TweetWithVisibilityResultsFromJSONTyped(json, true), typename: 'TweetWithVisibilityResults'};
        default:
            throw new Error(`No variant of TweetUnion exists with 'typename=${json['typename']}'`);
    }
}

export function TweetUnionToJSON(value?: TweetUnion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['typename']) {
        case 'Tweet':
            return TweetToJSON(value);
        case 'TweetTombstone':
            return TweetTombstoneToJSON(value);
        case 'TweetWithVisibilityResults':
            return TweetWithVisibilityResultsToJSON(value);
        default:
            throw new Error(`No variant of TweetUnion exists with 'typename=${value['typename']}'`);
    }

}

