/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Callback } from './Callback';
import {
    CallbackFromJSON,
    CallbackFromJSONTyped,
    CallbackToJSON,
} from './Callback';
import type { CtaClientEventInfo } from './CtaClientEventInfo';
import {
    CtaClientEventInfoFromJSON,
    CtaClientEventInfoFromJSONTyped,
    CtaClientEventInfoToJSON,
} from './CtaClientEventInfo';
import type { TimelineCoverBehavior } from './TimelineCoverBehavior';
import {
    TimelineCoverBehaviorFromJSON,
    TimelineCoverBehaviorFromJSONTyped,
    TimelineCoverBehaviorToJSON,
} from './TimelineCoverBehavior';

/**
 * 
 * @export
 * @interface CoverCta
 */
export interface CoverCta {
    /**
     * 
     * @type {string}
     * @memberof CoverCta
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof CoverCta
     */
    buttonStyle?: CoverCtaButtonStyleEnum;
    /**
     * 
     * @type {Array<Callback>}
     * @memberof CoverCta
     */
    callbacks: Array<Callback>;
    /**
     * 
     * @type {CtaClientEventInfo}
     * @memberof CoverCta
     */
    clientEventInfo: CtaClientEventInfo;
    /**
     * 
     * @type {TimelineCoverBehavior}
     * @memberof CoverCta
     */
    ctaBehavior: TimelineCoverBehavior;
}


/**
 * @export
 */
export const CoverCtaButtonStyleEnum = {
    Primary: 'Primary'
} as const;
export type CoverCtaButtonStyleEnum = typeof CoverCtaButtonStyleEnum[keyof typeof CoverCtaButtonStyleEnum];


/**
 * Check if a given object implements the CoverCta interface.
 */
export function instanceOfCoverCta(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "callbacks" in value;
    isInstance = isInstance && "clientEventInfo" in value;
    isInstance = isInstance && "ctaBehavior" in value;

    return isInstance;
}

export function CoverCtaFromJSON(json: any): CoverCta {
    return CoverCtaFromJSONTyped(json, false);
}

export function CoverCtaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoverCta {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': !exists(json, 'Text') ? undefined : json['Text'],
        'buttonStyle': !exists(json, 'buttonStyle') ? undefined : json['buttonStyle'],
        'callbacks': ((json['callbacks'] as Array<any>).map(CallbackFromJSON)),
        'clientEventInfo': CtaClientEventInfoFromJSON(json['clientEventInfo']),
        'ctaBehavior': TimelineCoverBehaviorFromJSON(json['ctaBehavior']),
    };
}

export function CoverCtaToJSON(value?: CoverCta | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Text': value.text,
        'buttonStyle': value.buttonStyle,
        'callbacks': ((value.callbacks as Array<any>).map(CallbackToJSON)),
        'clientEventInfo': CtaClientEventInfoToJSON(value.clientEventInfo),
        'ctaBehavior': TimelineCoverBehaviorToJSON(value.ctaBehavior),
    };
}

