/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ErrorExtensions } from './ErrorExtensions';
import {
    ErrorExtensionsFromJSON,
    ErrorExtensionsFromJSONTyped,
    ErrorExtensionsToJSON,
} from './ErrorExtensions';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';
import type { Tracing } from './Tracing';
import {
    TracingFromJSON,
    TracingFromJSONTyped,
    TracingToJSON,
} from './Tracing';

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * 
     * @type {ErrorExtensions}
     * @memberof ModelError
     */
    extensions: ErrorExtensions;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    kind: string;
    /**
     * 
     * @type {Array<Location>}
     * @memberof ModelError
     */
    locations: Array<Location>;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelError
     */
    path: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    retryAfter: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    source: string;
    /**
     * 
     * @type {Tracing}
     * @memberof ModelError
     */
    tracing: Tracing;
}

/**
 * Check if a given object implements the ModelError interface.
 */
export function instanceOfModelError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "extensions" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "locations" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "retryAfter" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "tracing" in value;

    return isInstance;
}

export function ModelErrorFromJSON(json: any): ModelError {
    return ModelErrorFromJSONTyped(json, false);
}

export function ModelErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'extensions': ErrorExtensionsFromJSON(json['extensions']),
        'kind': json['kind'],
        'locations': ((json['locations'] as Array<any>).map(LocationFromJSON)),
        'message': json['message'],
        'name': json['name'],
        'path': json['path'],
        'retryAfter': json['retry_after'],
        'source': json['source'],
        'tracing': TracingFromJSON(json['tracing']),
    };
}

export function ModelErrorToJSON(value?: ModelError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'extensions': ErrorExtensionsToJSON(value.extensions),
        'kind': value.kind,
        'locations': ((value.locations as Array<any>).map(LocationToJSON)),
        'message': value.message,
        'name': value.name,
        'path': value.path,
        'retry_after': value.retryAfter,
        'source': value.source,
        'tracing': TracingToJSON(value.tracing),
    };
}

