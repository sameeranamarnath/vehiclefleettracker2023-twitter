/* tslint:disable */
/* eslint-disable */
/**
 * Twitter OpenAPI
 * Twitter OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Tracing } from './Tracing';
import {
    TracingFromJSON,
    TracingFromJSONTyped,
    TracingToJSON,
} from './Tracing';

/**
 * 
 * @export
 * @interface Extensions
 */
export interface Extensions {
    /**
     * 
     * @type {number}
     * @memberof Extensions
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof Extensions
     */
    kind: string;
    /**
     * 
     * @type {string}
     * @memberof Extensions
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Extensions
     */
    source: string;
    /**
     * 
     * @type {Tracing}
     * @memberof Extensions
     */
    tracing: Tracing;
}

/**
 * Check if a given object implements the Extensions interface.
 */
export function instanceOfExtensions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "tracing" in value;

    return isInstance;
}

export function ExtensionsFromJSON(json: any): Extensions {
    return ExtensionsFromJSONTyped(json, false);
}

export function ExtensionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Extensions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'kind': json['kind'],
        'name': json['name'],
        'source': json['source'],
        'tracing': TracingFromJSON(json['tracing']),
    };
}

export function ExtensionsToJSON(value?: Extensions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'kind': value.kind,
        'name': value.name,
        'source': value.source,
        'tracing': TracingToJSON(value.tracing),
    };
}

