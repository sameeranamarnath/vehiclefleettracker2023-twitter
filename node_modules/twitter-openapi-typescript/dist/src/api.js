"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwitterOpenApiClient = exports.TwitterOpenApi = void 0;
var i = require("twitter-openapi-typescript-generated");
var apis_1 = require("./apis");
var usersApi_1 = require("./apis/usersApi");
var TwitterOpenApi = /** @class */ (function () {
    function TwitterOpenApi() {
    }
    TwitterOpenApi.prototype.cookie_normalize = function (cookie) {
        return cookie.reduce(function (a, b) {
            var _b;
            var _c = __read(b.split('; ')[0].split('='), 2), key = _c[0], value = _c[1];
            return __assign(__assign({}, a), (_b = {}, _b[key] = value, _b));
        }, {});
    };
    TwitterOpenApi.prototype.cookieEncode = function (cookie) {
        return Object.entries(cookie)
            .map(function (_b) {
            var _c = __read(_b, 2), key = _c[0], value = _c[1];
            return "".concat(key, "=").concat(value);
        })
            .join('; ');
    };
    TwitterOpenApi.prototype.setCookies = function (context, cookies) {
        if (context.init.headers) {
            var headers = context.init.headers;
            headers['cookie'] = this.cookieEncode(cookies);
        }
        return context;
    };
    TwitterOpenApi.prototype.getGuestClient = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cookies, response, html, re, find, activate_headers, guest_token;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        cookies = {};
                        return [4 /*yield*/, _a.fetchApi(_a.twitter, {
                                method: 'GET',
                                redirect: 'manual',
                                headers: { Cookie: this.cookieEncode(cookies) },
                            })];
                    case 1:
                        response = _b.sent();
                        cookies = __assign(__assign({}, cookies), this.cookie_normalize(response.headers.getSetCookie()));
                        return [4 /*yield*/, _a.fetchApi(_a.twitter, {
                                method: 'GET',
                                headers: { Cookie: this.cookieEncode(cookies) },
                            }).then(function (response) { return response.text(); })];
                    case 2:
                        html = _b.sent();
                        re = new RegExp('document.cookie="(.*?)";', 'g');
                        find = __spreadArray([], __read(html.matchAll(re)), false).map(function (e) { return e[1]; });
                        cookies = __assign(__assign({}, cookies), this.cookie_normalize(find));
                        cookies = Object.entries(cookies)
                            .filter(function (_b) {
                            var _c = __read(_b, 2), key = _c[0], value = _c[1];
                            return key != 'ct0';
                        })
                            .reduce(function (a, _b) {
                            var _c;
                            var _d = __read(_b, 2), key = _d[0], value = _d[1];
                            return (__assign(__assign({}, a), (_c = {}, _c[key] = value, _c)));
                        }, {});
                        if (!!cookies['gt']) return [3 /*break*/, 4];
                        activate_headers = __assign(__assign({}, _a.api_key), { authorization: "Bearer ".concat(_a.bearer) });
                        return [4 /*yield*/, _a.fetchApi('https://api.twitter.com/1.1/guest/activate.json', {
                                method: 'POST',
                                headers: activate_headers,
                            }).then(function (response) { return response.json(); })];
                    case 3:
                        guest_token = (_b.sent()).guest_token;
                        cookies['gt'] = guest_token;
                        _b.label = 4;
                    case 4: 
                    // const chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
                    // const csrfToken = [...Array(32)].reduce((a) => a + chars[Math.floor(Math.random() * chars.length)], '');
                    // cookies.push({ name: 'ct0', value: csrfToken });
                    return [2 /*return*/, this.getClientFromCookies(cookies)];
                }
            });
        });
    };
    TwitterOpenApi.prototype.getClientFromCookies = function (cookies) {
        return __awaiter(this, void 0, void 0, function () {
            var api_key, config;
            var _this = this;
            return __generator(this, function (_b) {
                api_key = __assign({}, _a.api_key);
                if (cookies['ct0']) {
                    api_key['x-twitter-auth-type'] = 'OAuth2Session';
                    api_key['x-csrf-token'] = cookies['ct0'];
                }
                if (cookies['gt']) {
                    api_key['x-guest-token'] = cookies['gt'];
                }
                config = {
                    fetchApi: _a.fetchApi,
                    middleware: [{ pre: function (context) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                                return [2 /*return*/, this.setCookies(context, cookies)];
                            }); }); } }],
                    apiKey: function (key) { return api_key[key.toLowerCase()]; },
                    accessToken: _a.bearer,
                };
                return [2 /*return*/, this.getClient(new i.Configuration(config))];
            });
        });
    };
    TwitterOpenApi.prototype.getClient = function (api) {
        return __awaiter(this, void 0, void 0, function () {
            var flag;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, _a.fetchApi(_a.url, { method: 'GET' }).then(function (res) {
                            return res.json();
                        })];
                    case 1:
                        flag = (_b.sent());
                        return [2 /*return*/, new TwitterOpenApiClient(api, flag)];
                }
            });
        });
    };
    var _a;
    _a = TwitterOpenApi;
    TwitterOpenApi.hash = '7560ee63488ec9d15f5389e64867f2413701d7dd';
    TwitterOpenApi.url = "https://raw.githubusercontent.com/fa0311/twitter-openapi/".concat(_a.hash, "/src/config/placeholder.json");
    TwitterOpenApi.twitter = 'https://twitter.com/home';
    TwitterOpenApi.userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36';
    TwitterOpenApi.bearer = 'AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA';
    TwitterOpenApi.browser_headers = {
        accept: 'text/plain, */*; q=0.01',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.9',
        'cache-control': 'no-cache',
        pragma: 'no-cache',
        'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': _a.userAgent,
    };
    TwitterOpenApi.api_key = __assign({ 'x-twitter-client-language': 'en', 'x-twitter-active-user': 'yes' }, _a.browser_headers);
    TwitterOpenApi.fetchApi = fetch;
    return TwitterOpenApi;
}());
exports.TwitterOpenApi = TwitterOpenApi;
var TwitterOpenApiClient = /** @class */ (function () {
    function TwitterOpenApiClient(config, flag) {
        this.config = config;
        this.flag = flag;
    }
    TwitterOpenApiClient.prototype.getDefaultApi = function () {
        return new apis_1.DefaultApiUtils(new i.DefaultApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getTweetApi = function () {
        return new apis_1.TweetApiUtils(new i.TweetApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getUserApi = function () {
        return new apis_1.UserApiUtils(new i.UserApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getUsersApi = function () {
        return new usersApi_1.UsersApiUtils(new i.UsersApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getUserListApi = function () {
        return new apis_1.UserListApiUtils(new i.UserListApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getPostApi = function () {
        return new apis_1.PostApiUtils(new i.PostApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getV11GetApi = function () {
        return new apis_1.V11GetApiUtils(new i.V11GetApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getV11PostApi = function () {
        return new apis_1.V11PostApiUtils(new i.V11PostApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getV20GetApi = function () {
        return new apis_1.V20GetApiUtils(new i.V20GetApi(this.config), this.flag);
    };
    TwitterOpenApiClient.prototype.getInitialStateApi = function () {
        return new apis_1.InitialStateApiUtils();
    };
    return TwitterOpenApiClient;
}());
exports.TwitterOpenApiClient = TwitterOpenApiClient;
//# sourceMappingURL=api.js.map