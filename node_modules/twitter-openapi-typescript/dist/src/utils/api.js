"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildHeader = exports.buildCursor = exports.entriesCursor = exports.userResultConverter = exports.userEntriesConverter = exports.userOrNullConverter = exports.tweetResultsConverter = exports.buildTweetApiUtils = exports.tweetEntriesConverter = exports.instructionToEntry = exports.errorCheck = exports.getKwargs = void 0;
var i = require("twitter-openapi-typescript-generated");
var getKwargs = function (flag, additional) {
    var kwargs = { pathQueryId: flag.queryId };
    if (flag.variables != undefined) {
        kwargs.variables = JSON.stringify(__assign(__assign({}, flag.variables), additional));
    }
    if (flag.features != undefined) {
        kwargs.features = JSON.stringify(flag.features);
    }
    if (flag.fieldToggles != undefined) {
        kwargs.fieldToggles = JSON.stringify(flag.fieldToggles);
    }
    return kwargs;
};
exports.getKwargs = getKwargs;
var errorCheck = function (data) {
    var res = data;
    if (res.data != undefined) {
        return res;
    }
    else if (res.error != undefined) {
        throw Error(res.errors[0].message);
    }
    throw Error();
};
exports.errorCheck = errorCheck;
var instructionToEntry = function (item) {
    return item.flatMap(function (e) {
        if (e.type == i.InstructionType.TimelineAddEntries) {
            return e.entries;
        }
        else if (e.type == i.InstructionType.TimelineReplaceEntry) {
            return [e.entry];
        }
        return [];
    });
};
exports.instructionToEntry = instructionToEntry;
var tweetEntriesConverter = function (item) {
    return item
        .map(function (e) {
        var _a;
        if (e.content.entryType == i.ContentEntryType.TimelineTimelineItem) {
            var item_1 = e.content.itemContent;
            var timeline = item_1.itemType == i.ContentItemType.TimelineTweet ? item_1 : undefined;
            if (timeline == undefined)
                return undefined;
            return (0, exports.buildTweetApiUtils)({
                result: timeline.tweetResults,
                promotedMetadata: timeline.promotedMetadata,
            });
        }
        else if (e.content.entryType == i.ContentEntryType.TimelineTimelineModule) {
            var item_2 = (_a = e.content.items) !== null && _a !== void 0 ? _a : [];
            var timelineList = item_2
                .filter(function (e) { return e.item.itemContent.itemType == i.ContentItemType.TimelineTweet; })
                .map(function (e) { return e.item.itemContent; });
            if (timelineList.length == 0)
                return undefined;
            var timeline = timelineList[0];
            return (0, exports.buildTweetApiUtils)({
                result: timeline.tweetResults,
                promotedMetadata: timeline.promotedMetadata,
                reply: timelineList.slice(1),
            });
        }
    })
        .filter(function (e) { return e != undefined; });
};
exports.tweetEntriesConverter = tweetEntriesConverter;
var buildTweetApiUtils = function (args) {
    var _a, _b, _c, _d;
    var tweet = (0, exports.tweetResultsConverter)(args.result);
    if (tweet == undefined)
        return undefined;
    var result = (_a = tweet.core) === null || _a === void 0 ? void 0 : _a.userResults.result;
    var user = result && (0, exports.userOrNullConverter)(result);
    if (user == undefined)
        return undefined;
    var quoted = tweet.quotedStatusResult;
    var retweeted = (_b = tweet.legacy) === null || _b === void 0 ? void 0 : _b.retweetedStatusResult;
    var reply = (_d = (_c = args.reply) === null || _c === void 0 ? void 0 : _c.map(function (e) { return (0, exports.buildTweetApiUtils)({ result: e.tweetResults, promotedMetadata: e.promotedMetadata }); }).filter(function (e) { return e != undefined; })) !== null && _d !== void 0 ? _d : [];
    return {
        raw: args.result,
        promotedMetadata: args.promotedMetadata,
        tweet: tweet,
        user: user,
        replies: reply,
        retweeted: retweeted == undefined ? undefined : (0, exports.buildTweetApiUtils)({ result: retweeted }),
        quoted: quoted == undefined ? undefined : (0, exports.buildTweetApiUtils)({ result: quoted }),
    };
};
exports.buildTweetApiUtils = buildTweetApiUtils;
var tweetResultsConverter = function (tweetResults) {
    if (tweetResults.result == undefined)
        return undefined;
    switch (tweetResults.result.typename) {
        case i.TypeName.Tweet:
            return tweetResults.result;
        case i.TypeName.TweetWithVisibilityResults:
            return tweetResults.result.tweet;
        case i.TypeName.TweetTombstone:
            return undefined;
    }
    throw Error();
};
exports.tweetResultsConverter = tweetResultsConverter;
var userOrNullConverter = function (userResults) {
    if (userResults.typename == i.TypeName.User) {
        return userResults;
    }
};
exports.userOrNullConverter = userOrNullConverter;
var userEntriesConverter = function (item) {
    return item
        .map(function (e) {
        if (e.content.typename == i.TypeName.TimelineTimelineItem) {
            var item_3 = e.content.itemContent;
            if (item_3.itemType == i.ContentItemType.TimelineUser) {
                return item_3.userResults;
            }
        }
    })
        .filter(function (e) { return e != undefined; });
};
exports.userEntriesConverter = userEntriesConverter;
var a = function (a) {
    return a;
};
var userResultConverter = function (user) {
    return user
        .map(function (e) {
        var user = e.result && (0, exports.userOrNullConverter)(e.result);
        if (user == undefined)
            return undefined;
        return {
            raw: e,
            user: user,
        };
    })
        .filter(function (e) { return e != undefined; });
};
exports.userResultConverter = userResultConverter;
var entriesCursor = function (item) {
    var cursorList = item
        .map(function (e) {
        if (e.content.entryType == i.ContentEntryType.TimelineTimelineCursor) {
            return e.content;
        }
        else if (e.content.entryType == i.ContentEntryType.TimelineTimelineItem) {
            var item_4 = e.content;
            if (item_4.itemContent.itemType == i.ContentItemType.TimelineTimelineCursor) {
                return item_4.itemContent;
            }
        }
    })
        .filter(function (e) { return e != undefined; });
    return (0, exports.buildCursor)(cursorList);
};
exports.entriesCursor = entriesCursor;
var buildCursor = function (cursorList) {
    return {
        top: cursorList.find(function (e) { return e.cursorType == i.CursorType.Top; }),
        bottom: cursorList.find(function (e) { return e.cursorType == i.CursorType.Bottom; }),
    };
};
exports.buildCursor = buildCursor;
var buildHeader = function (headers) {
    var _a, _b, _c;
    return {
        raw: headers,
        connectionHash: headers.get('x-connection-hash'),
        contentTypeOptions: headers.get('x-content-type-options'),
        frameOptions: headers.get('x-frame-options'),
        rateLimitLimit: Number((_a = headers.get('x-rate-limit-limit')) !== null && _a !== void 0 ? _a : 0),
        rateLimitRemaining: Number((_b = headers.get('x-rate-limit-remaining')) !== null && _b !== void 0 ? _b : 0),
        rateLimitReset: Number((_c = headers.get('x-rate-limit-reset')) !== null && _c !== void 0 ? _c : 0),
        responseTime: Number(headers.get('x-response-time')),
        tfePreserveBody: headers.get('x-tfe-preserve-body') == 'true',
        transactionId: headers.get('x-transaction-id'),
        twitterResponseTags: headers.get('x-twitter-response-tags'),
        xssProtection: Number(headers.get('x-xss-protection')),
    };
};
exports.buildHeader = buildHeader;
//# sourceMappingURL=api.js.map