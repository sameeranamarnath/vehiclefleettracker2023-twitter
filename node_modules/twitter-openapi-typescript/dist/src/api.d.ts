import * as i from 'twitter-openapi-typescript-generated';
import { DefaultApiUtils, InitialStateApiUtils, PostApiUtils, TweetApiUtils, UserApiUtils, UserListApiUtils, V11GetApiUtils, V11PostApiUtils, V20GetApiUtils } from './apis';
import { DefaultFlag } from './models';
import { UsersApiUtils } from './apis/usersApi';
export declare class TwitterOpenApi {
    static hash: string;
    static url: string;
    static twitter: string;
    static userAgent: string;
    static bearer: string;
    static browser_headers: {
        accept: string;
        'accept-encoding': string;
        'accept-language': string;
        'cache-control': string;
        pragma: string;
        'sec-ch-ua': string;
        'sec-ch-ua-mobile': string;
        'sec-ch-ua-platform': string;
        'sec-fetch-dest': string;
        'sec-fetch-mode': string;
        'sec-fetch-site': string;
        'user-agent': string;
    };
    static api_key: {
        accept: string;
        'accept-encoding': string;
        'accept-language': string;
        'cache-control': string;
        pragma: string;
        'sec-ch-ua': string;
        'sec-ch-ua-mobile': string;
        'sec-ch-ua-platform': string;
        'sec-fetch-dest': string;
        'sec-fetch-mode': string;
        'sec-fetch-site': string;
        'user-agent': string;
        'x-twitter-client-language': string;
        'x-twitter-active-user': string;
    };
    static fetchApi: i.FetchAPI;
    cookie_normalize(cookie: string[]): {
        [key: string]: string;
    };
    cookieEncode(cookie: {
        [key: string]: string;
    }): string;
    setCookies(context: i.RequestContext, cookies: {
        [key: string]: string;
    }): i.RequestContext;
    getGuestClient(): Promise<TwitterOpenApiClient>;
    getClientFromCookies(cookies: {
        [key: string]: string;
    }): Promise<TwitterOpenApiClient>;
    getClient(api: i.Configuration): Promise<TwitterOpenApiClient>;
}
export declare class TwitterOpenApiClient {
    private config;
    flag: DefaultFlag;
    constructor(config: i.Configuration, flag: DefaultFlag);
    getDefaultApi(): DefaultApiUtils;
    getTweetApi(): TweetApiUtils;
    getUserApi(): UserApiUtils;
    getUsersApi(): UsersApiUtils;
    getUserListApi(): UserListApiUtils;
    getPostApi(): PostApiUtils;
    getV11GetApi(): V11GetApiUtils;
    getV11PostApi(): V11PostApiUtils;
    getV20GetApi(): V20GetApiUtils;
    getInitialStateApi(): InitialStateApiUtils;
}
//# sourceMappingURL=api.d.ts.map