"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetApiUtils = void 0;
var utils_1 = require("../utils");
var TweetApiUtils = /** @class */ (function () {
    function TweetApiUtils(api, flag) {
        this.api = api;
        this.flag = flag;
    }
    TweetApiUtils.prototype.request = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var apiFn, args, response, checked, _a, instruction, entry, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        apiFn = param.apiFn.bind(this.api);
                        args = (0, utils_1.getKwargs)(this.flag[param.key], param.param);
                        return [4 /*yield*/, apiFn(args)];
                    case 1:
                        response = _b.sent();
                        _a = utils_1.errorCheck;
                        return [4 /*yield*/, response.value()];
                    case 2:
                        checked = _a.apply(void 0, [_b.sent()]);
                        instruction = param.convertFn(checked);
                        entry = (0, utils_1.instructionToEntry)(instruction);
                        data = (0, utils_1.tweetEntriesConverter)(entry);
                        return [2 /*return*/, {
                                raw: {
                                    response: response.raw,
                                },
                                header: (0, utils_1.buildHeader)(response.raw.headers),
                                data: {
                                    raw: {
                                        instruction: instruction,
                                        entry: entry,
                                    },
                                    cursor: (0, utils_1.entriesCursor)(entry),
                                    data: data,
                                },
                            }];
                }
            });
        });
    };
    TweetApiUtils.prototype.getTweetDetail = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({ focalTweetId: param.focalTweetId }, (param.cursor == undefined ? {} : { cursor: param.cursor })), (param.controllerData == undefined ? {} : { controller_data: param.controllerData })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getTweetDetailRaw,
                                convertFn: function (e) { return e.data.threadedConversationWithInjectionsV2.instructions; },
                                key: 'TweetDetail',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getSearchTimeline = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign(__assign({ rawQuery: param.rawQuery }, (param.product == undefined ? {} : { product: param.product })), (param.cursor == undefined ? {} : { cursor: param.cursor })), (param.count == undefined ? {} : { count: param.count })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getSearchTimelineRaw,
                                convertFn: function (e) { return e.data.searchByRawQuery.searchTimeline.timeline.instructions; },
                                key: 'SearchTimeline',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getHomeTimeline = function (param) {
        if (param === void 0) { param = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({}, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getHomeTimelineRaw,
                                convertFn: function (e) { return e.data.home.homeTimelineUrt.instructions; },
                                key: 'HomeTimeline',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getHomeLatestTimeline = function (param) {
        if (param === void 0) { param = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({}, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getHomeLatestTimelineRaw,
                                convertFn: function (e) { return e.data.home.homeTimelineUrt.instructions; },
                                key: 'HomeLatestTimeline',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getListLatestTweetsTimeline = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({ listId: param.listId }, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getListLatestTweetsTimelineRaw,
                                convertFn: function (e) { var _a, _b; return (_b = (_a = e.data.list.tweetsTimeline.timeline) === null || _a === void 0 ? void 0 : _a.instructions) !== null && _b !== void 0 ? _b : []; },
                                key: 'ListLatestTweetsTimeline',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getUserTweets = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({ userId: param.userId }, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getUserTweetsRaw,
                                convertFn: function (e) { return e.data.user.result.timelineV2.timeline.instructions; },
                                key: 'UserTweets',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getUserTweetsAndReplies = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({ userId: param.userId }, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getUserTweetsAndRepliesRaw,
                                convertFn: function (e) { return e.data.user.result.timelineV2.timeline.instructions; },
                                key: 'UserTweetsAndReplies',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getUserMedia = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({ userId: param.userId }, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getUserMediaRaw,
                                convertFn: function (e) { return e.data.user.result.timelineV2.timeline.instructions; },
                                key: 'UserMedia',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getLikes = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({ userId: param.userId }, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getLikesRaw,
                                convertFn: function (e) { return e.data.user.result.timelineV2.timeline.instructions; },
                                key: 'Likes',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    TweetApiUtils.prototype.getBookmarks = function (param) {
        if (param === void 0) { param = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var args, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = __assign(__assign(__assign({}, (param.count == undefined ? {} : { count: param.count })), (param.cursor == undefined ? {} : { cursor: param.cursor })), param.extraParam);
                        return [4 /*yield*/, this.request({
                                apiFn: this.api.getBookmarksRaw,
                                convertFn: function (e) { return e.data.bookmarkTimelineV2.timeline.instructions; },
                                key: 'Bookmarks',
                                param: args,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return TweetApiUtils;
}());
exports.TweetApiUtils = TweetApiUtils;
//# sourceMappingURL=tweetApi.js.map